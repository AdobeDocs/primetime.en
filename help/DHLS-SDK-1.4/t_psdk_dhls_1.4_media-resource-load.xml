<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="load-a-media-resource"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Load a media resource in the MediaPlayer</title> 
  <shortdesc> Load a resource by directly instantiating a <codeph>MediaResource</codeph> and loading
		the video content to be played. <ph>This is one way of loading a media resource.</ph>
	</shortdesc> 
  <taskbody> 
	 <steps id="steps_3EA43F434D10427CBC5B85F279EFBCD9"> 
		<step id="step_D571C6B1A54D474DBB52A38124E1276C">
				<cmd> Set your <codeph>MediaPlayer</codeph> object's playable item with the new
					resource to be played. </cmd>
				<info>
					<p>Replace your existing MediaPlayer's currently playable item by calling
							<codeph>MediaPlayer.replaceCurrentResource</codeph> and passing an
						existing <codeph>MediaResource</codeph> instance. </p>
				</info>
			</step> 
		<step id="step_D484F5EB1741452C9E3A810FF68F6032" > 
		  <cmd>Check for at least the following changes: 
		  </cmd> 
		  <info> 
			 <ul id="ul_43094A7B1AD94EC387CC52153C36586E"> 
				<li id="li_631B0D02235343AEABEC482CEF912180">INITIALIZED 
				</li> 
				<li id="li_2FE51EE83B1841268F1DF3D891D041A8">PREPARED 
				</li> 
				<li id="li_F790C098057245198B3570BF9301802F">ERROR 
				</li> 
			 </ul> 
			 <p>Through these events, the 
				<codeph>MediaPlayer</codeph> object can notify your application
				when the media resource is successfully loaded. 
			 </p> 
		  </info> 
		</step>
		<step id="step_119B2ACFA28A4B7182C643D2D703256F" >
		  <cmd>When the state of the media player changes to INITIALIZED, you can
			 call 
			 <codeph>MediaPlayer.prepareToPlay</codeph>
		  </cmd>
		  <info> The INITIALIZED state indicates that the media has been
			 successfully loaded. Calling 
			 <codeph>prepareToPlay</codeph> starts the advertising resolution and
			 placement process, if any. 
		  </info>
		</step>
		<step id="step_705E7204F6F345CA8F53DDF5F3E4E461" >
		  <cmd>When the media player status changes to PREPARED, the media stream
			 has successfully loaded and is prepared for playback. 
		  </cmd>
		  <info>When the media stream is loaded, a 
			 <codeph>MediaPlayerItem</codeph> is created.
		  </info>
		</step>
	 </steps> 
	 <result id="result_37B432AC35A348BFB83763F4BD93D1F3">
		<p>If a failure occurs, the MediaPlayer switches to the ERROR status. It also notifies your
				application by dispatching the <codeph>STATUS_CHANGED</codeph> event to your
					<codeph>MediaPlayerStatusChangeEvent</codeph> callback. </p>
		<p >This passes several parameters: 
		<ul id="ul_3C390EEE1ACA421DA1DEA730090BFD7E"> 
		  <li id="li_E4EB031C7BAE40F7990519CB7C3900C6">A 
			 <parmname>type</parmname> parameter of type string with the value 
			 <codeph>ERROR</codeph>. 
		  </li> 
		  <li id="li_B60AC65C14154717927ADA1E1BBB7F1D">A 
			 <parmname>MediaError</parmname> parameter that you can use to get a
			 notification that contains diagnostic information about the error event. 
		  </li> 
		</ul>
		</p> 
	 </result> 
	 <example id="example_3774607C6F08473282CF0CB7F3D82373"> 
		<p>The following simplified sample code illustrates the process of
		  loading a media resource: 
		</p> 
		<codeblock outputclass="syntax actionscript">
// mediaResource is a properly configured MediaResource instance
// mediaPlayer is a MediaPlayer instance
// register an event listener with the MediaPlayer instance
mediaPlayer.addEventListener(MediaPlayerStatusChangeEvent.STATUS_CHANGED, 
                             onStatusChanged);
private function onStatusChanged(event:MediaPlayerStatusChangeEvent):void {
   switch(event.status) {
      case MediaPlayerStatus.INITIALIZED:
          // at this point, the resource is successfully loaded
          // the media player will provide a reference to the current
          // "playable item" ( is guarantee to be valid and not-null).
          var playerItem: MediaPlayerItem = mediaPlayer.currentItem;
          // we can take a look at the media item characteristics like
          // alternate audio tracks, profile information, if is a live stream
          // if is drm protected
          mediaPlayer.prepareToPlay();
          break;
    case MediaPlayerStatus.PREPARED:
         // at this point, the resource is successfully processed all 
         // advertisement placements have been executed and the the 
         // MediaPlayer is ready to start the playback
        if (autoPlay) {
            mediaPlayer.play();
        }
        break;
    case MediaPlayerStatus.ERROR:
        // something bad happened - the resource cannot be loaded
        // details about the problem are provided via the event.error property
        break;
        // implementation of the other methods in the PlaybackEventListener interface
        ...
    }
}</codeblock> 
	 </example> 
  </taskbody> 
</task> 
