<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_opp_detect_impl_dhls"> 
  <title>Implement a custom opportunity detector</title> 
  <shortdesc>You can implement your own opportunity detectors. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_E2BA203B30504049AF35A667EF82B902"> 
		<ul id="ul_DBBAA20F4604433AA0D3AE0EFA8730F3"> 
		  <li id="li_2F6805B4C1D14864973A9D5AA80B411D">If your opportunity
			 generator is based on 
			 <codeph>TimedMetadata</codeph> objects associated with the current
			 media stream, then it should extend the 
			 <codeph>SpliceOutOpportunityGenerator</codeph> or 
			 <codeph>TimedMetadataOpportunityGenerator</codeph>.
		  </li> 
		  <li id="li_5C6E5003A6F941FCA8AD3998A0BC15E4">If your opportunity
			 generator is based on out-of-band data provided by an external service (such as
			 a CIS), then it should extend the 
			 <codeph>OpportunityGenerator</codeph>.
		  </li> 
		</ul> 
	 </context>
	 <steps id="steps_08C783D6897C445E93C7BBF35C4DA982"> 
		<step id="step_0B59CF25692041849FA5054462B9F349">
		  <cmd>Create the custom opportunity generator.
		  </cmd>
		  <info>
			 <p> If your custom opportunity generator is based on 
				<codeph>TimedMetadata</codeph> objects, then extend the 
				<codeph>TimedMetadataOpportunityGenerator</codeph> and override
				these methods: 
			 <ul id="ul_F412A21EB6EE48E69DC940A10F71B2C3">
				<li id="li_D2326FC2235E4E00B73B59136E6E54D9"><codeph>doConfigure</codeph> - This method is
								called after the media player item has been created and provides the
								opportunity generator to create an initial set of opportunities if
								needed </li>
				<li id="li_614F5F4A061E4818A5D6EAC9BF648CF2"><codeph>doProcess</codeph> - This method is called
								every time new <codeph>TimedMetadata</codeph> is detected (for
								example, for live/linear streams every time the playlist/manifest
								refreshes) </li>
			 </ul>
			 </p> 
		  </info>
		  <stepxmp>
			 <codeblock>public class CustomOpportunityGenerator extends TimedMetadataOpportunityGenerator {
    override protected function doConfigure(playhead:Number, playbackRange:TimeRange):void {
        // the playhead represents the initial playback position
        // the playback range represents the initial playback range
         
        // the item property indicates the current MediaPlayerItem associated with this generator
        // the initial set of timed metadata can be obtain through the item property
        var timedMetadataCollection:Vector.&lt;TimedMetadata&gt; = item.timedMetadata;
    }
 
    override protected function doProcess(timedMetadata:TimedMetadata):void {
        ...
         
        // when an opportunity is created by this generator
        // we need to notify the <ph conkeyref="phrases/primetime-sdk-name"><?xm-replace_text Phrase?></ph> through the client property
        client.resolve(opportunity);
    } 
    ...
}</codeblock>
		  </stepxmp>
		</step> 
		<step id="step_DA6D1A98689541C1AE68F778AF98C7F6">
		  <cmd>Create the custom content factory, which uses the custom
			 opportunity generator.
		  </cmd>
		  <stepxmp>
			 <codeblock>public class CustomContentFactory extends DefaultContentFactory {
    ...
 
    /**
    * @inheritDoc
    */
    override protected function doRetrieveGenerators(item:MediaPlayerItem):Vector.&lt;OpportunityGenerator&gt; {
        var result:Vector.&lt;OpportunityGenerator&gt; = new Vector.&lt;OpportunityGenerator&gt;();
        result.push(new CustomOpportunityGenerator());
         
        return result;
    }
}</codeblock>
		  </stepxmp>
		</step>
		<step id="step_978919854FBD4C1AAC5C85BE1A589E58">
		  <cmd>Register the custom content factory for the media stream to be
			 played.
		  </cmd>
		  <stepxmp>
			 <codeblock>var mediaPlayerItemConfig:MediaPlayerItemConfig = new DefaultMediaPlayerItemConfig();
mediaPlayerItemConfig.advertisingFactory = new CustomContentFactory();
...
 
player.replaceCurrentResource(mediaResource, mediaPlayerItemConfig);</codeblock>
		  </stepxmp>
		</step>
	 </steps> 
  </taskbody> 
</task> 
