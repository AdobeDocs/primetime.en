<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="track-ave-warnings-in-player"> 
  <title>Track AVE warnings in your player</title> 
  <shortdesc>Using the 
	 <codeph>NotificationEvent</codeph>, you can track warnings that are passed
	 from the Adobe Video Engine (AVE). 
  </shortdesc> 
  <taskbody> 
	 <context> 
		<p>Your player app can track playback warnings and errors generated by the AVE such as failover or
				network down events that do not halt playback and do not necessarily require any
				action by your app. While some AVE errors are dealt with by the <ph
					conkeyref="phrases/primetime-sdk-name"/>, <codeph>NotificationEvent</codeph>
				serves as a general pass-through mechanism to your application layer for AVE
				warnings. After receiving AVE warnings, you might choose to take some action, such
				as proactively stopping playback, activating a contingency plan, logging messages,
				and so on. </p> 
		<p>Use the following API elements to track AVE warnings in your player: 
		</p> 
		<p><b><codeph>NotificationCode</codeph></b> 
		  <codeblock outputclass="syntax actionscript">public final class NotificationCode {
    /**
     *  Warning message for playback status.
     */
    public static const GENERAL_WARNING:int = 101100;
}</codeblock> 
		</p> 
		<p><b><codeph>NotificationEvent</codeph></b>
				<codeblock outputclass="syntax actionscript">/**
 * Event dispatched by MediaPlayer when a notification is available
 * for the current media stream being played.
 */
public class NotificationEvent extends Event {
    /**
     * Event dispatched when a new warning has been received for the current item.
     *
     * The newly created Notification object can be accessed through 
     * the notification property of this event.
     */
    public static const WARNING_AVAILABLE:String = "warningAvailable";
    /**
     * Helper method for creating NotificationEvent events.
     * Throws an ArgumentError if the specified ad break is null.
     * @param notification Associated notification object.
     *
     * @return a valid notification event instance.
     */
    public static function create(
           type:String, notification:Notification):NotificationEvent;
     /**
     * Default constructor
     * Throws an ArgumentError if the specified ad break is null.
     * @param type           Event type.
     * @param bubbles        Whether the event can bubble up the display list hierarchy.
     * @param cancelable     Whether the behavior associated with the event can be prevented.
     * @param notification   Associated notification object.
     */
    public function NotificationEvent(type:String, 
                                      bubbles:Boolean=false, 
                                      cancelable:Boolean=false, 
                                      notification:Notification= null);
     /**
     * The notification associated with this event.
     */
    public function get notification():Notification;
    /**
     * @inheritDoc
     */
    public override function clone():Event;
}</codeblock>
			</p> 
	 </context> 
	 <steps> 
		<step> 
		  <cmd>Add an event listener to your player to catch AVE warnings. 
		  </cmd> 
		  <info>For example:
					<codeblock outputclass="syntax actionscript">var _player:DefaultMediaPlayer = new DefaultMediaPlayer(context);
_player.addEventListener(NotificationEvent.WARNING_AVAILABLE, onWarningAvailable);

private function onWarningAvailable(event:NotificationEvent):void {
    var metadata:Metadata = event.notification.metadata;
    if (metadata != null) {
        for each (var key:String in metadata.keySet()) {
            var value:String = metadata.getValue(key);
            if (!StringUtils.isEmpty(key) &amp;&amp; !StringUtils.isEmpty(value)) {
                _logger.warn("#onWarningAvailable metadata [{0}:{1}]", key, value);
            }
        }
    }
}
</codeblock>
				</info> 
		</step> 
	 </steps> 
	 <example>Here is an example
		of AVE warnings that were tracked using 
		<codeph>NotificationEvent</codeph>: 
		<codeblock>[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [resourceType:HLS]
[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [resourceId:0]
[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [runtimeCode:66]
[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [runtimeCodeMessage:SEGMENT_SKIPPED_ON_FAILURE]
[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [eventType:Warning]
<ph >[WARN ] [psdkdemo::PSDKDemo] #onWarningAvailable metadata [description:url::=
  http://xyz.corp.adobe.com/pmp/assets/abc/failover/tc.1.04/content/backup-01/
  low-res/main-stream4-4x3-info6.ts,periodIndex::=0,
  sizeBytes::=0,downloadTime(ms)::=0,mediaDuration(ms)::=0]</ph></codeblock> 
	 </example> 
  </taskbody> 
</task> 
