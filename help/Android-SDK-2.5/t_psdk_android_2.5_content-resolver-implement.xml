<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_content_resolver_implement_android"> 
  <title>Implement a custom content resolver</title> 
  <shortdesc>You can implement your own content resolvers based on the default
	 resolvers. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_D8FCA737EE0644CDB13E3954580190CE"> 
		<p>When <ph conkeyref="phrases/primetime-sdk-name"/> generates a new opportunity, it iterates through the registered content resolvers
				looking for one that is capable of resolving that opportunity. The first one that
				returns <codeph>true</codeph> is selected to resolve the opportunity. If no content
				resolver is capable, that opportunity is skipped. Because the content resolving
				process is usually asynchronous, the content resolver is responsible for notifying
				<ph conkeyref="phrases/primetime-sdk-name"/> when the process has completed. </p> 
	 </context> 
	 <steps id="steps_9B6A31C312954029A6F4B4614F48D519"> 
		<step id="step_B2DC78AE43784BEDB48727846783073C"> 
		  <cmd>Implement your own custom 
			 <codeph>ContentFactory</codeph>, by extending the 
			 <codeph>ContentFactory</codeph> interface and overriding 
			 <codeph>retrieveResolvers</codeph>. 
		  </cmd> 
		  <info>
			 <p>For example:
						<codeblock outputclass="syntax java">class MyContentFactory extends ContentFactory {
    @Override
    public List&lt;ContentResolver> retrieveResolvers(MediaPlayerItem item) {
        List&lt;ContentResolver> resolvers = new ArrayList&lt;ContentResolver>();
        MediaPlayerItemConfig itemConfig = item.getConfig();
        if(itemConfig) {
            CustomRangeMetadata customRanges = itemConfig.getCustomRangeMetadata();
            if (customRanges) {
                List&lt;ReplaceTimeRange> timeRanges = customRanges.getTimeRangeList();

                if (timeRanges &amp;&amp; timeRanges.size() > 0)
                {
                // CustomRangeResolver is only activated by the presence of CustomRanges in configuration
                resolvers.add(new CustomRangeResolver());
                }
            }
            AdvertisingMetadata metadata = itemConfig.getAdvertisingMetadata();
            if (metadata) {
                if (metadata instanceOf AuditudeSettings) 
                    resolvers.add(new AuditudeResolver(getContext());			
                }
            }
        // add your custom resolver if any
        resolvers.add(MyOpportunityGenerator(item));
        return resolvers;
    }
    ...
}
</codeblock>
					</p>
		  </info> 
		</step> 
		<step id="step_780D9F88052B483088DD255B4DE3FF88"> 
		  <cmd>Register the 
			 <codeph>ContentFactory</codeph> to the 
			 <codeph>MediaPlayer</codeph>. 
		  </cmd> 
		  <info>
			 <p>For example:
						<codeblock outputclass="syntax java">//Register the custom content factory with the media player
MediaPlayerItemConfig config = new MediaPlayerItemConfig();
config.setAdvertisingFactory(new MyContentFactory());

//Pass this config while loading the resource
mediaPlayer.replaceCurrentResource(resource, config);

// OR use MediaPlayerItemLoader to pre-load a resource
id = 23;
itemLoader.load(resource, id, config);</codeblock>
					</p>
		  </info> 
		</step> 
		<step id="step_05753DDADAA6407E9382D6EB581A7796"> 
		  <cmd>Pass an 
			 <codeph>AdvertisingMetadata</codeph> object to <ph conkeyref="phrases/primetime-sdk-name"/> as follows: 
		  </cmd> 
		  <substeps id="substeps_F7572416DC1041158B8766927FDBE443"> 
			 <substep id="substep_D5B981EC24874856A16278D67E286E00"> 
				<cmd>Create an 
				  <codeph>AdvertisingMetadata</codeph> object. 
				</cmd> 
			 </substep> 
			 <substep id="substep_CE6A6FCAB944423FBC974F5FF7B17263"> 
				<cmd>Save the 
				  <codeph>AdvertisingMetadata</codeph> object to 
				  <codeph>MediaPlayerItemConfig</codeph>. 
				</cmd> 
				<info>
				  <codeblock outputclass="syntax java">AdvertisingMetadata advertisingMetadata = new AdvertisingMetadata();

advertisingMetadata.setDelayAdLoading(true);
...

mediaPlayerItemConfig.setAdvertisingMetadata(advertisingMetadata);
</codeblock>
				</info> 
			 </substep> 
		  </substeps> 
		</step> 
		<step id="step_4D9BC76AD93B48C0A240EC4F977B7A7C">
				<cmd>Create a custom ad resolver class that extends the
						<codeph>ContentResolver</codeph> class. </cmd>
				<substeps id="substeps_54AC3CD2325F43DFB0F4386703620995">
					<substep id="substep_C297E0BB70064A66A90BD943FEB3AF90">
						<cmd>In the custom ad resolver, override <codeph>doConfigure</codeph>,
								<codeph>doCanResolve</codeph>, <codeph>doResolve</codeph>,
								<codeph>doCleanup</codeph>: </cmd>
						<info>
							<p>
								<codeblock outputclass="syntax java">void doConfigure(MediaPlayerItem item);
boolean doCanResolve(Opportunity opportunity);
void doResolve(Opportunity opportunity);
void doCleanup();</codeblock>
							</p>
							<p>You get your <codeph>advertisingMetadata</codeph> from the item
								passed in <codeph>doConfigure</codeph>:
								<codeblock outputclass="syntax java">MediaPlayerItemConfig itemConfig = item.getConfig();

AdvertisingMetadata advertisingMetadata = 
  mediaPlayerItemConfig.getAdvertisingMetadata();
</codeblock>
							</p>
						</info>
					</substep>
					<substep id="substep_D33BA4E0FA9B49F8900A5A6BC80750B1">
						<cmd>For each placement opportunity, create a
								<codeph>List&lt;TimelineOperation&gt;</codeph>. </cmd>
						<info>
							<p>This sample <codeph>TimelineOperation</codeph> provides a structure
								for <codeph>AdBreakPlacement</codeph>:
								<codeblock outputclass="syntax java">AdBreakPlacement(
    new AdBreak( ads,    // Vector&lt;Ad&gt;
                 tracker // Content Tracker
    ),
    placementInformation // Retrieved from Opportunity
);
</codeblock>
							</p>
						</info>
					</substep>
					<substep id="substep_BCD7A10456D14E0D9529EDC6B9021B1C">
						<cmd> After ads are resolved, call one of the following functions: </cmd>
						<info>
							<ul id="ul_FD4898D100D444D093E40A54CA24459E">
								<li id="li_DC8AB18E9F9A457388D423BFA48336B8">If the ad resolve
									succeeds, call <codeph>process(List&lt;TimelineOperation&gt;
										proposals)</codeph> and <codeph>notifyCompleted(Opportunity
										opportunity)</codeph> on the
										<codeph>ContentResolverClient</codeph>
									<p>
										<codeblock outputclass="syntax java">_client.process(timelineOperations);
_client.notifyCompleted(opportunity);
</codeblock>
									</p>
								</li>
								<li id="li_644DEBEA53754D14B55840EBD4B57168">If the ad resolve
									fails, call <codeph>notifyResolveError</codeph> on the
										<codeph>ContentResolverClient</codeph>
									<p>
										<codeblock outputclass="syntax java">_client.notifyFailed(Opportunity opportunity, PSDKErrorCode error);</codeblock>
									</p>
									<p>For example:
										<codeblock outputclass="syntax java">_client.notifyFailed(opportunity, UNSUPPORTED_OPERATION);</codeblock>
									</p>
								</li>
							</ul>
						</info>
					</substep>
				</substeps>
			</step> 
	 </steps> 
	 <example id="example_463B718749504A978F0B887786844C39"> 
		<p>This sample custom ad resolver resolves an opportunity and serves a simple ad:
				<codeblock outputclass="syntax java">public class CustomContentResolver extends ContentResolver {
    protected void doConfigure(MediaPlayerItem item){}

    protected boolean doCanResolve(Opportunity opportunity) { 
        return true; 
    }

    protected void doResolve(Opportunity opportunity) {
        _client.process(createAdBreakPlacementsFor(opportunity.getPlacement()));
        _client.notifyCompleted(opportunity);
    }

    private List&lt;TimelineOperation> createAdBreakPlacementsFor(Placement placementInformation) {
        List&lt;Ad> ads = new ArrayList&lt;Ad>();
        AdAsset adAsset = new AdAsset("101", 15000, new MediaResource(
          "http: . . ..m3u8", MediaResource.Type.HLS, null), null, null);

        Ad ad = Ad.linearFromAsset("101", adAsset, null, null, false);
        ads.add(ad);
        AdBreak adBreak = new AdBreak(ads, null, AdInsertionType.CLIENT_INSERTED);

        List&lt;TimelineOperation> result = new ArrayList&lt;TimelineOperation>();

        result.add(new AdBreakPlacement(placementInformation, adBreak));
        return result;
    }

    protected void doCleanup() {}
}
</codeblock>
			</p> 
	 </example> 
  </taskbody> 
</task> 
