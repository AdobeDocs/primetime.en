<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="parallel-downloads"> 
  <title>Parallel downloads</title> 
  <shortdesc>Downloading video and audio in parallel, rather than in a series,
	 reduces startup delays. 
  </shortdesc> 
  <conbody>
		<p>Parallel downloads allows video-on-demand (VOD) files to be played, optimizes the
			available bandwidth usage from a server, lowers the probability of getting into buffer
			under-run situations, and minimizes the delay between download and playback. </p>
		<draft-comment author="kenny">Removed as part of "no DASH use cases" for 2.5.1, May 31st,
			2017 release.<p>Parallel downloads allows DASH video-on-demand (VOD) files to be played,
				optimizes the available bandwidth usage from a server, lowers the probability of
				getting into buffer under-run situations, and minimizes the delay between download
				and playback. </p></draft-comment> 
	 <p>Without parallel downloads, <ph conkeyref="phrases/primetime-sdk-name"/> issues a request for the video
		segment, and after the video segment is loaded, it requests one or two audio
		segments. With parallel downloads, the audio and video segments are downloaded
		simultaneously, not sequentially. Also, because there are two connections and
		two HTTP requests per segment in parallel, the data reaches the screen faster. 
	 </p>
		<note type="restriction">This feature applies only to content where the audio and video are
			encoded into different files (unmuxed content) and does not apply to MP4 content, which
			is always muxed. HLS content is often unmuxed, especially with alternate audio. </note>
		<draft-comment author="kenny">See comment above (DASH use case removed).<note
				type="restriction">This feature applies only to content where the audio and video
				are encoded into different files (unmuxed content) and does not apply to MP4
				content, which is always muxed. Most DASH content is unmuxed, and HLS content is
				often unmuxed, especially with alternate audio. </note></draft-comment> 
	 <p>The HTTP connection might experience delays at the following stages: 
	 <ul id="ul_5B2DF4790EA54933AB5F79C97436ACF4"> 
		<li id="li_B22CE095D0A54EBB85096E1F6E694CA4">When establishing the TCP/IP
		  connection to server 
		  <p>Although the client and server have agreed to communicate, no HTTP
			 communication has occurred yet. This type of delay depends on the
			 infrastructure between the client and the server. This process requires finding
			 a path through the internet between the client and the server and making sure
			 all devices, such as routers and firewalls, on the route agree to the data
			 transfer. 
		  </p> 
		</li> 
		<li id="li_91A3222993DA426A9169D27A499E456E">When sending an HTTP request
		  for a segment or a manifest over the TCP/IP connection. 
		  <p>The server receives the request, processes it, and starts sending
			 the data back to the client. The degree of delay depends on the load and the
			 complexity of the software on the server and somewhat on the upload connection
			 speed when the client sends the request. 
		  </p> 
		</li> 
	 </ul> 
	 </p> 
  </conbody> 
</concept> 
