<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_impl_early_break_return"> 
  <title>Implement an early ad break return</title> 
  <shortdesc>For live stream ad insertion, you might need to exit from an ad
	 break before all the ads in the break are played to completion. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_04B1AD8CB2A547EDB55B1062E7DD35AF"> 
		<p>For example, the duration of the ad break in certain sports events
		  might not be known before the break starts. <ph conkeyref="phrases/primetime-sdk-name"/> provides a default duration,
		  but if the game resumes before the break finishes, the ad break must be exited.
		  Another example is an emergency signal during an ad break in a live stream. 
		</p> 
	 </context> 
	 <steps id="steps_9A4E7884044B4D95A887BDAD98FFBEA0"> 
		<step id="step_8C0013D7E25D4AC09EC1FBE02CAD6CB6"> 
		  <cmd>Subscribe to 
			 <codeph>#EXT-X-CUE-OUT</codeph>,<codeph>#EXT-X-CUE-IN</codeph>, and 
			 <codeph>#EXT-X-CUE</codeph>, which are the splice out/splice in
			 markers. 
		  </cmd> 
		  <info>For more information about to how to splice out/in ad markers,
			 see 
			 <xref keyref="content-resolver-about"/> 
		  </info> 
		</step> 
		<step id="step_F32E5156998B4856BDAB1096C90E65F7"> 
		  <cmd>Use a custom 
			 <codeph>ContentFactory</codeph>. 
		  </cmd> 
		</step> 
		<step id="step_CA0279A147034D05A3C8BD54134242E8"> 
		  <cmd>In 
			 <codeph>retrieveGenerators</codeph>, use the 
			 <codeph>SpliceInPlacementOpportunityGenerator</codeph>. 
		  </cmd> 
		  <info> 
			 <p>For example:
						<codeblock outputclass="syntax java">public List&lt;OpportunityGenerator&gt; retrieveGenerators(MediaPlayerItem item) {
    List&lt;OpportunityGenerator&gt; generators = new ArrayList&lt;OpportunityGenerator&gt;();
    generators.add(SpliceInPlacementOpportunityDetector(item));
    return generators;
}</codeblock>
					</p> 
			 <p>For more information about using a custom 
				<codeph>ContentFactory</codeph>, see step 1 in 
				<xref keyref="opp-detector-impl"/>. 
			 </p> 
		  </info> 
		</step> 
		<step id="step_E1135CC5C5F04770838E284A7CA4EB47"> 
		  <cmd>On the same custom 
			 <codeph>ContentFactory</codeph>, implement 
			 <codeph>retrieveResolvers</codeph> and include 
			 <codeph>AuditudeResolver</codeph> and 
			 <codeph>SpliceInCustomResolver</codeph>. 
		  </cmd> 
		  <info>For example:
					<codeblock outputclass="syntax java">List&lt;ContentResolver&gt; contentResolvers = new ArrayList&lt;ContentResolver&gt;();
contentResolvers.add(new AuditudeResolver(getActivity().getApplicationContext()));
contentResolvers.add(new SpliceInCustomResolver());
return contentResolvers;</codeblock>
				</info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
