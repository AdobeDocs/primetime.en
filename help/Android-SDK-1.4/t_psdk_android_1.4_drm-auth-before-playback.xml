<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="drm-before-playback-task"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>DRM authentication before playback</title> 
  <shortdesc>When the DRM metadata for a video is separate from the media
	 stream, perform authentication before beginning playback. 
	 <draft-comment>REVIEWERS: This needs to be updated for DHLS, but I don’t
		have DHLS generated reference docs. 
	 </draft-comment> 
  </shortdesc> 
  <taskbody> 
	 <context> 
		<p>A video asset can have an associated DRM metadata file. For example: 
		<ul> 
		  <li> 
			 <p>"url": "http://www.domain.com/asset.m3u8" 
			 </p> 
		  </li> 
		  <li> 
			 <p>"drmMetadata": "http://www.domain.com/asset.metadata" 
			 </p> 
		  </li> 
		</ul> 
		</p> 
		<p>When this is the case, use 
		  <codeph>DRMHelper</codeph> methods to download the contents of the DRM
		  metadata file, parse it, and check whether DRM authentication is needed. 
		</p> 
	 </context> 
	 <steps> 
		<step> 
		  <cmd>Use 
			 <codeph>loadDRMMetadata</codeph> to load the metadata URL content and
			 parse the downloaded bytes to a 
			 <codeph>DRMMetadata</codeph>. 
		  </cmd> 
		  <info> 
			 <p>Like any other network operation, this method is asynchronous,
				creating its own thread. 
			 </p> 
		  </info> 
		  <info> 
			 <p> 
				<codeblock outputclass="syntax java">public static void loadDRMMetadata(
    final DRMManager drmManager,
    final String drmMetadataUrl, 
    final DRMLoadMetadataListener loadMetadataListener); </codeblock> 
			 </p> 
		  </info> 
		  <stepxmp> 
			 <p>For example: 
			 </p> 
			 <codeblock outputclass="syntax java">DRMHelper.loadDRMMetadata(drmManager, metadataURL, new DRMLoadMetadataListener());</codeblock> 
		  </stepxmp> 
		</step> 
		<step> 
		  <cmd>Because the operation is asynchronous, it is a good idea to make
			 the user aware of that. Otherwise, he'll wonder why his playback is not
			 beginning. For example, show a spinner wheel while the DRM metadata is being
			 downloaded and parsed. 
		  </cmd> 
		</step> 
		<step> 
		  <cmd>Implement the callbacks in the 
			 <codeph>DRMLoadMetadataListener</codeph>. The 
			 <codeph>loadDRMMetadata</codeph> calls these event handlers
			 (dispatches these events). 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">public interface <b>DRMLoadMetadataListener</b> {
 public void <b>onLoadMetadataUrlStart</b>();
 /**
  * @param authNeeded
  *     whether DRM authentication is needed.
  * @param drmMetadata
  *     the parsed DRMMetadata obtained.    */
 public void <b>onLoadMetadataUrlComplete</b>(boolean authNeeded, DRMMetadata drmMetadata);
 public void <b>onLoadMetadataUrlError</b>();
}</codeblock> 
		  </info> 
		  <info> 
			 <ul> 
				<li> 
				  <p><codeph>onLoadMetadataUrlStart</codeph> detects when the
					 metadata URL loading has begun. 
				  </p> 
				</li> 
				<li> 
				  <p><codeph>onLoadMetadataUrlComplete</codeph> detects when the
					 metadata URL has finished loading. 
				  </p> 
				</li> 
				<li> 
				  <p><codeph>onLoadMetadataUrlError</codeph> indicates that the
					 metadata failed to load. 
				  </p> 
				</li> 
			 </ul> 
		  </info> 
		</step> 
		<step> 
		  <cmd>When loading completes, inspect the 
			 <codeph>DRMMetadata</codeph> object to see whether DRM authentication
			 is needed. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">public static boolean <b>isAuthNeeded</b>(DRMMetadata drmMetadata);</codeblock> 
		  </info> 
		  <stepxmp> 
			 <p>For example: 
			 </p> 
			 <codeblock outputclass="syntax java">@Override
public void onLoadMetadataUrlComplete(boolean authNeeded, DRMMetadata drmMetadata) { 
  Log.i(LOG_TAG + "#onLoadMetadataUrlComplete", 
                  "Loaded metadata URL contents. Auth needed:" + authNeeded + ".");
  if (!authNeeded) {
      // Auth is not required. Start player activity.    
      showLoadingSpinner(false);    
      startPlayerActivity(ASSET_URL);
      return;
  }</codeblock> 
		  </stepxmp> 
		</step> 
		<step> 
		  <cmd>If authentication is not needed, begin playback. 
		  </cmd> 
		</step> 
		<step> 
		  <cmd>If authentication is needed, perform the authentication by acquiring the license.  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">/**
* Helper method to perform DRM authentication.
*
* @param drmManager
* the DRMManager, used to perform the authentication.
* @param drmMetadata
* the DRMMetadata, containing the DRM specific information.
* @param authenticationListener
* the listener, on which the user can be notified about the
* authentication process status.
*/
public static void performDrmAuthentication(
     final DRMManager drmManager, 
     final DRMMetadata drmMetadata,
     final String authUser, 
     final String authPass, 
     final DRMAuthenticationListener authenticationListener);</codeblock> 
		  </info> 
		  <stepxmp> 
			 <p>This example, for simplicity, explicitly codes the user’s name and
				password. 
			 </p> 
			 <codeblock outputclass="syntax java">DRMHelper.performDrmAuthentication(drmManager, drmMetadata, DRM_USERNAME, DRM_PASSWORD, 
  new DRMAuthenticationListener() {
    @Override
    public void onAuthenticationStart() {
        Log.i(LOG_TAG + "#onAuthenticationStart", "DRM authentication started.");
        // Spinner is already showing.
    }
    @Override
    public void onAuthenticationError(int major, int minor, String errorString, String serverErrorURL) { 
        Log.e(LOG_TAG + "#onAuthenticationError", "DRM authentication failed. " + 
          major + " 0x" + Long.toHexString(minor));
        showToast(getString(R.string.drmAuthenticationError));  
        showLoadingSpinner(false);
    }
    @Override
    public void onAuthenticationComplete(byte[] authenticationToken) {
        Log.i(LOG_TAG + "#onAuthenticationComplete", "Auth successful. Launching content.");
        showLoadingSpinner(false);
        startPlayerActivity(ASSET_URL);
    }
});
</codeblock> 
		  </stepxmp> 
		</step> 
		<step> 
		  <cmd>This also implies network communication, hence this is also an
			 asynchronous operation. Use an event listener to check the authentication
			 status. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">public interface DRMAuthenticationListener {
    /**
    *       Called to indicate that DRM authentication has started.
    */
    public void onAuthenticationStart();
    /**
    *       Called to indicate that DRM authentication has been successful.
    *
    * @param authenticationToken
    *       the obtained token, which can be stored locally.
    */
    public void onAuthenticationComplete(byte[] authenticationToken);
    /**
    *       Called to indicate that an error occurred while performing the DRM
    *       authentication.
    *
    * @param major
    *       the major code.
    * @param minorC
    *       the minor code.
    * @param errorString
    *       the exception thrown.
    * @param serverErrorURL
    *       the URL of the server 
    *       on which the error occurred
    */
    public void onAuthenticationError(int major, int minor, 
      String errorString, String serverErrorURL);
}
</codeblock> 
		  </info> 
		</step> 
		<step> 
		  <cmd>If authentication is successful, start playback. 
		  </cmd> 
		</step> 
		<step> 
		  <cmd>If authentication is not successful, notify the user and do not
			 start playback. 
		  </cmd> 
		  <info> 
			 <p>Your application must handle any authentication errors. Failing to successfully authenticate
						before playing places <ph conkeyref="phrases/primetime-sdk-name"/> into an
						error state. That is, it changes its state to ERROR, an error is generated
						containing the error code from the DRM library, and the playback stops. Your
						application must resolve the issue, reset the player, and reload the
						resource. </p> 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
