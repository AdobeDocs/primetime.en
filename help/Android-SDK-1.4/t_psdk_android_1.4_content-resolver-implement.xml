<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_content_resolver_implement_android"> 
  <title>Implement a custom content resolver</title> 
  <shortdesc>You can implement your own content resolvers based on the default
	 resolvers. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_D053D901791940C1A7651C73EA24490B"> 
		<p>When <ph conkeyref="phrases/primetime-sdk-name"/> detects a new opportunity, it iterates
                through the registered content resolvers looking for one that is capable of
                resolving that opportunity. The first one that returns true is selected for
                resolving the opportunity. If no content resolver is capable, then that opportunity
                is skipped. Because the content resolving process is usually asynchronous, the
                content resolver is responsible for notifying <ph
                    conkeyref="phrases/primetime-sdk-name"/> when the process has completed. </p> 
		<p> 
		</p> 
	 </context> 
	 <steps id="steps_98078B66B4D64880815B022D18414CAF"> 
		<step id="step_0A66BA12F84C4141BF80D7FAEAE8EA3B">
                <cmd>Create a custom <codeph>AdvertisingFactory</codeph> instance and override
                        <codeph>createContentResolver</codeph>. </cmd>
                <info>For example: </info>
                <stepxmp>
                    <codeblock outputclass="syntax java">new AdvertisingFactory() {
    ...
    @Override
    public ContentResolver createContentResolver(MediaPlayerItem item) {
        Metadata metadata = _mediaPlayer.getCurrentItem().getResource().getMetadata();
        if (metadata != null) {
            if (metadata.containsKey(DefaultMetadataKeys.AUDITUDE_METADATA_KEY.getValue())) {
                return new AuditudeResolver(getActivity().getApplicationContext());
            } else if (metadata.containsKey(DefaultMetadataKeys.JSON_METADATA_KEY.getValue())) {
                return new MetadataResolver();
            } else if (metadata.containsKey(DefaultMetadataKeys.TIME_RANGES_METADATA_KEY.getValue())) {
                return new CustomAdMarkersContentResolver();
            } else if (metadata.containsKey(CustomAdResolver.CUSTOM_METADATA_KEY)) {
                return new CustomAdResolver();
            }
        }
        return null;
    }
    ...
}</codeblock>
                </stepxmp>
            </step> 
		<step id="step_4CBA7693CC144B48AAF4AE0FFB1BB9E2">
                <cmd>Register the ad client factory to the <codeph>MediaPlayer</codeph>. </cmd>
                <info>For example: </info>
                <stepxmp>
                    <codeblock outputclass="syntax java">// register the custom advertising factory with media player
advertisingFactory = createCustomAdvertisingFactory();
mediaPlayer.registerAdClientFactory(advertisingFactory);</codeblock>
                </stepxmp>
            </step> 
		<step  id="step_2C3DA04574FA4273ACA1AF5A052210FD"> 
		  <cmd>Pass an 
			 <codeph>AdvertisingMetadata</codeph> object to 
			 <ph conkeyref="phrases/primetime-sdk-name"/> as follows: 
		  </cmd> 
		  <substeps id="substeps_C3985C96AF45477A9B6D94E78B5E4D5D"> 
			 <substep id="substep_98FBFEBFF7CE401DA4177A07BC0DF258"> 
				<cmd>Create an 
				  <codeph>AdvertisingMetadata</codeph> object and 
				  <codeph>MetadataNode</codeph> object. 
				</cmd> 
			 </substep> 
			 <substep id="substep_2858F76160B640E8973F237F994F1DE5"> 
				<cmd>Save the 
				  <codeph>AdvertisingMetadata</codeph> object to 
				  <codeph>MetadataNode</codeph>. 
				</cmd> 
			 </substep> 
		  </substeps> 
		  <stepxmp> 
			 <codeblock outputclass="syntax java">MetadataNode result = new MetadataNode();
result.setNode(DefaultMetadataKeys.ADVERTISING_METADATA.getValue(), 
               advertisingMetadata);</codeblock> 
		  </stepxmp> 
		</step> 
		<step  id="step_53C1AFADF0AD4736A31C1258C31C1C2A"> 
		  <cmd> Create a custom ad resolver class that extends the 
			 <codeph>ContentResolver</codeph> class. 
		  </cmd> 
		  <substeps id="substeps_B74C23513AAD4E5E9474313DEB8F18F3"> 
			 <substep id="substep_82E79078BDE54C888DCDF6C535DC3BA1"> 
				<cmd>In the custom ad resolver, override this protected function: 
				</cmd> 
				<info> 
				  <codeblock outputclass="syntax java">void doResolveAds(Metadata metadata, 
                  PlacementOpportunity placementOpportunity)</codeblock> 
				  <p >Metadata contains your 
					 <codeph>AdvertisingMetada</codeph>. Use it for the following 
					 <codeph>TimelineOperation</codeph> vector generation. 
				  </p> 
				</info> 
			 </substep> 
			 <substep id="substep_D75B2F62FCDF47B5A6C43A29BD549F41"> 
				<cmd>For each placement opportunity, create a<codeph>
					 Vector&lt;TimelineOperation&gt;</codeph>. 
				</cmd> 
				<info> The vector can be empty, but not null. 
				</info> 
				<stepxmp>This sample <codeph>TimelineOperation</codeph> provides a structure for
                                <codeph>AdBreakPlacement</codeph>:
                            <codeblock outputclass="syntax java">AdBreakPlacement(AdBreak.createAdBreak(
                          ads,       // Vector&lt;Ad&gt;
                          time,      // Ad Break start time. Note: local time on the timeline
                          duration,  // Ad Break duration
                          tag()      // An arbitrary string value that can be attached to 
                                     // the AdBreak object.
                         ), placementInformation  // Retrieved from PlacementOpportunity
)</codeblock>
                        </stepxmp> 
			 </substep> 
			 <substep id="substep_7CC549DFAD264133B4467B3B12DC3195"> 
				<cmd> After ads are resolved, call one of the following functions: 
				</cmd> 
				<info > 
				  <ul id="ul_A36828FA38204F3188A26184782174C3"> 
					 <li id="li_C5E51FA8C9ED410FB987D56BB1000018">If the ad resolve
						succeeds: 
						<codeph>notifyResolveComplete(Vector&lt;TimelineOperation&gt;
						  proposals)</codeph>
					 </li> 
					 <li id="li_71757D2E50FC41D19339E1030939C15D">If the ad resolve
						fails: 
						<codeph>notifyResolveError(Error error)</codeph>
					 </li> 
				  </ul> 
				</info> 
				<stepxmp>For example, if it fails:
                            <codeblock outputclass="syntax java">Metadata metadata = new MetadataNode();
metadata.setValue("NATIVE_ERROR_CODE", exception.getCause().toString());
error.setMetadata(metadata);</codeblock>
                        </stepxmp> 
			 </substep> 
		  </substeps> 
		</step> 
	 </steps> 
	 <example  id="example_4F0D7692A92E480A835D6FDBEDBE75E7"> 
		<p>This sample custom ad resolver makes an HTTP request to the ad server
		  and receives a JSON response. 
		</p> 
		<codeblock outputclass="syntax java">public class CustomAdResolver extends ContentResolver {
    ...
    @Override
    protected void doResolveAds(Metadata metadata, PlacementOpportunity placementOpportunity) {
        ...
        if (resolveSuccess == true) {
            notifyResolveComplete(Vector&lt;TimelineOperation&gt; proposals);
        }
        else {
            notifyResolveError(Error error);
        }
    }
    ...
}</codeblock> 
		<p>Sample JSON ad server response for a live stream:
                <codeblock outputclass="syntax json">{    
    "response": {
        "breaks": [ {
            "start": 0,
            "ads": [ {
                "id": 1001,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/geico/playlist.m3u8",
                    "duration": 30000,
                    "id": "asset1",
                    "resource_type": ""
                },
                "companion_assets": {
                }
            }
        ] },
        {
            "start": -1,
            "ads": [ {
                "id": 1003,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/priceline/playlist.m3u8",
                    "duration": 30000,
                    "id": "asset3",
                    "resource_type": ""
                },
                "companion_assets": {
                }
            } ]
        } ]
    }
}
</codeblock>
            </p> 
		<p>Sample JSON ad server response for VOD:
                <codeblock outputclass="syntax json">{    
    "response": {
        "breaks": [ {
            "start": 0,
            "ads": [ {
                "id": 1001,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/geico/playlist.m3u8",
                    "duration": 30000,
                    "id": "asset1",
                    "resource_type": ""
                },
                "companion_assets": { 
                }
            },
            {
                "id": 1002,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/crescent/playlist.m3u8",
                    "duration": 15000,
                    "id": "asset2",
                    "resource_type": ""
                },
                "companion_assets": {
                }
            } ]
        },
        {
            "start": 50000,
            "ads": [ {
                "id": 1003,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/priceline/playlist.m3u8",
                    "duration": 30000,
                    "id": "asset3",
                    "resource_type": ""
                },
                "companion_assets": {
                }
            } ]
        },
        {
            "start": 100000000,
            "ads": [ {
                "id": 1004,
                "primary_asset": {
                    "url": "http://venkat-test.s3.amazonaws.com/ads/camry/playlist.m3u8",
                    "duration": 15000,
                    "id": "asset4",
                    "resource_type": ""
                },
                "companion_assets": {
                }
            } ]
        } ]
    }
}
</codeblock>
            </p> 
	 </example> 
  </taskbody> 
</task> 
