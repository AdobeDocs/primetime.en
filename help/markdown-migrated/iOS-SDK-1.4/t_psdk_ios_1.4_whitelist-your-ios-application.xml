<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_dcd_bcy_pr"> 
  <title>Whitelist your iOS application</title> 
  <shortdesc> You can whitelist your iOS apps by using Adobe's 
	 <filepath>machotools</filepath> tool. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_A3E66313DDD94D479D86D7EA8B9D7FA1"> 
		<p>Generally, when you complete a 
		  <ph
		  conkeyref="phrases/primetime-sdk-name"/>
		  application, you can use 
		  <ph conref="phrase_library_ios.xml#c_psdk_phrase-library/drm-long"/>
		  command-line tools to whitelist your app. 
		  <note type="tip">You can also use these tools to create DRM policies
			 and encrypt content. 
		  </note>
		</p>
		<p>Whitelisting your app ensures that protected content can only be
		  played in your video player. However, whitelisting an iOS application requires
		  you to complete special procedure that works with Apple's application
		  submission policies. 
		</p> 
		<p>Before submitting an iOS app, you need to sign it and publish it to
		  Apple. 
		  <note type="attention">Apple strips your developer's signature and
			 re-signs the application with their own certificate.
		  </note> Because of the re-signing, the whitelisting information that
		  you generated before you submitted to the Apple App Store is not useable. 
		</p> 
		<p>To work with this submission policy, Adobe has created a 
		  <codeph>machotools</codeph> tool that will fingerprint your iOS
		  application to create a digest value, sign this value, and inject this value in
		  your iOS application. After you fingerprint your iOS app, you can submit the
		  app to the Apple App Store. When a user runs your app from the App Store, 
		  <ph conref="phrase_library_ios.xml#c_psdk_phrase-library/drm-short"/>
		  does a runtime calculation of the application fingerprint and confirms it with
		  the digest value that was previously injected in the application. If the
		  fingerprint matches, the app is confirmed as being whitelisted, and protected
		  content is allowed to play. 
		</p> 
		<p>The Adobe 
		  <codeph>machotools</codeph> tool is included in the iOS 
		  <ph
		  conkeyref="phrases/primetime-sdk-name"/>
		  SDK, in the 
		  <filepath>[...]/tools/DRM</filepath> folder. 
		</p> 
		<p>To use 
		  <codeph>machotools</codeph>: 
		</p> 
	 </context> 
	 <steps id="steps_9CC7137901854F49A8C5F6FD9DAD37A7"> 
		<step id="step_06CC24E6881346A69E67FFF456D2CA82"> 
		  <cmd>Generate a key pair. 
		  </cmd> 
		  <info>To use a utility such as OpenSSL, open a command window and enter
			 the following: 
			 <codeblock>openssl genrsa -des3 -out selfsigncert-ios.key 1024</codeblock> 
		  </info> 
		</step> 
		<step id="step_1C18CD47641E487D982E7FA036CBA3CC"> 
		  <cmd>When prompted, enter a password to protect the private key. 
		  </cmd> 
		  <info>Passwords should contain at least 12 characters, and the
			 characters should include a mixture of uppercase and lowercase ASCII characters
			 and numbers. 
		  </info> 
		</step> 
		<step id="step_17A1430CDE0149019676E7BC2288AAE7"> 
		  <cmd>To use OpenSSL to generate a strong password for you, open a
			 command window and enter the following: 
		  </cmd> 
		  <info> 
			 <codeblock>openssl rand -base64 8</codeblock> 
		  </info> 
		</step> 
		<step id="step_C90EAA4C034142279414B7EBFAC59829"> 
		  <cmd>Generate a Certificate Signing Request (CSR). 
		  </cmd> 
		  <info>To use OpenSSL to generate a CSR, open a Command Window and enter
			 the following: 
			 <codeblock>openssl req -new -key selfsigncert-ios.key -out selfsigncert-ios.csr -batch</codeblock> 
		  </info> 
		</step> 
		<step id="step_08BC6AAE444F4975A7CD8C60EE33AB44"> 
		  <cmd>Self-sign the cert and enter any duration. 
		  </cmd> 
		  <info>The following example gives a 20-year expiration: 
			 <codeblock outputclass="syntax objective-c">openssl x509 -req -days 7300 -in selfsigncert-ios.csr 
  -signkey selfsigncert-ios.key -out selfsigncert-ios.crt</codeblock> 
		  </info> 
		</step> 
		<step id="step_7BE03F5F05684FC0B3C0F7D80197DFED"> 
		  <cmd>Convert the self-signed certificate to a PKCS#12 file: 
		  </cmd> 
		  <info> 
			 <codeblock>openssl pkcs12 -export -out selfsigncert-ios.pfx 
  -inkey selfsigncert-ios.key -in selfsigncert-ios.crt</codeblock> 
			 <p>You can use the self-signed cert to sign your iOS App. 
			 </p> 
		  </info> 
		</step> 
		<step id="step_0956C98F5B434513B8156C85E0D5CA4A"> 
		  <cmd>Update the location of the PFX file and password. 
		  </cmd> 
		</step> 
		<step id="step_6FC835D0DA7A4FB8A2B03BFE75EDCDF2"> 
		  <cmd>Before building your application in Xcode, go to 
			 <menucascade><uicontrol>Build Phases</uicontrol><uicontrol>Run
				  Script</uicontrol></menucascade> and add the following command to your run
			 script: 
		  </cmd> 
		  <info> 
			 <codeblock>mkdir -p "${PROJECT_DIR}/generatedRes" "${PROJECT_DIR}/machotools" sign 
  -in "${CODESIGNING_FOLDER_PATH}/${EXECUTABLE_NAME}" 
  -out "${PROJECT_DIR}/generatedRes/AAXSAppDigest.digest" 
  -pfx "${PROJECT_DIR}/selfsigncert-ios.pfx" 
  -pass PASSWORD</codeblock> 
		  </info> 
		</step> 
		<step id="step_F438C128FFB7466A891FB4C33A8D72A6"> 
		  <cmd>Execute 
			 <filepath>machotools</filepath> to generate your app Publisher ID
			 hash value. 
		  </cmd> 
		  <info> 
			 <codeblock>./machotools dumpMachoSignature -in ${PROJECT_DIR}/generatedRes/AAXSAppDigest.digest</codeblock> 
		  </info> 
		</step> 
		<step id="step_C1099F5701B148D88A8E9391B35AF7B5"> 
		  <cmd>Create a new DRM Policy or update your existing policy to include
			 the returned Publisher ID hash value. 
		  </cmd> 
		</step> 
		<step id="step_9C91CB3C14CC42C6851E846E98CC9D39"> 
		  <cmd>Using the 
			 <filepath>AdobePolicyManager.jar</filepath>, create a new DRM Policy
			 (update your existing policy) to include the returned Publisher ID hash value,
			 an optional App ID, and min and max version attributes in the included 
			 <filepath>flashaccess-tools.properties</filepath> file. 
		  </cmd> 
		  <info> 
			 <codeblock>java -jar libs/AdobePolicyManager.jar new app_whitelist.pol</codeblock> 
		  </info> 
		</step> 
		<step id="step_C3A1B96B9EA141EF8FFEECBBEE4CA504"> 
		  <cmd>Package the content by using the new DRM policy and confirm the
			 playback of the whitelisted content in your iOS app. 
		  </cmd> 
		  <info/> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
