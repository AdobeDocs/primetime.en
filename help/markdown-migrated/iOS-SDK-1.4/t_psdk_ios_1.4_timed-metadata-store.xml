<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_timed_metadata_store"> 
  <title>Store timed metadata objects as they are dispatched</title> 
  <shortdesc> Your application must use the appropriate 
	 <codeph>PTTimedMetadata</codeph> objects at the appropriate times. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_7015AEAAEDDE42F89450C3C4E2F96B69"> 
		<p> During content parsing, which happens before playback, 
		  <ph conkeyref="phrases/primetime-sdk-name"/> identifies subscribed tags
		  and notifies your application about these tags. The time that is associated
		  with each 
		  <codeph>PTTimedMetadata</codeph> is the absolute time on the playback
		  timeline. 
		</p> 
		<p>Your application must complete the following tasks: 
		</p> 
	 </context> 
	 <steps id="steps_513D8CAD7D3341D2946CCB97CF32D58C"> 
		<step id="step_4FDB331880174B289E751BD4D3F89CB5"> 
		  <cmd>Keep track of the current playback time. 
		  </cmd> 
		</step> 
		<step id="step_FD1DE8C6039E4F16B817D6521252570C"> 
		  <cmd>Match the current playback time to the dispatched 
			 <codeph>PTTimedMetadata</codeph> objects. 
		  </cmd> 
		  <info> 
		  </info> 
		</step> 
		<step id="step_4388FF6A539F4599860D4CAA19EC0AF6"> 
		  <cmd>Use the 
			 <codeph>PTTimedMetadata</codeph> where the start time equals the
			 current playback time. 
		  </cmd> 
		  <info> 
			 <note type="restriction">The code below assumes that there is only
				one 
				<codeph>PTTimedMetadata</codeph> instance at a time. If there are
				multiple instances, the application must save them appropriately in a
				dictionary. One method is to create an array at a given time and store all
				instances in that array. 
			 </note> 
		  </info> 
		  <stepxmp>The following example shows how to save 
			 <codeph>PTTimedMetadata</codeph> objects in a 
			 <codeph>NSMutableDictionary (timedMetadataCollection)</codeph> keyed
			 by the start time of each 
			 <codeph>timedMetadata</codeph>. 
			 <codeblock outputclass="syntax objective-c">NSMutableDictionary *timedMetadataCollection;
 
- (void)onMediaPlayerSubscribedTagIdentified:(NSNotification *)notification
{
    if (!timedMetadataCollection)
    {
        timedMetadataCollection = [[NSMutableDictionary alloc] init];
    }
    NSDictionary *userInfo = [notification userInfo];
    PTTimedMetadata *timedMetadata = [(PTTimedMetadata *)[userInfo objectForKey:PTTimedMetadataKey] retain];
    if ([timedMetadata.name  isEqualToString: @"#EXT-OATCLS-SCTE35"])
    {
         NSLog(@"Adding timedMetadata %@ to timedMetadataCollection with time                     
                 %f",timedMetadata.name,CMTimeGetSeconds(timedMetadata.time));
 
        NSNumber *timedMetadataStartTime = [NSNumber numberWithInt:(int)CMTimeGetSeconds(timedMetadata.time)];
        [timedMetadataCollection setObject:timedMetadata forKey:timedMetadataStartTime];
    }
    [timedMetadata release];
}</codeblock> 
		  </stepxmp> 
		</step> 
	 </steps> 
	 <example id="example_3B51E9D4AF2449FAA8E804206F873ECF"> 
		<title>Parsing Nielsen ID3 tags</title> 
		<p>To extract the ID3 tag for parsing, use the following on the 
		  <codeph>onMediaPlayerSubscribedTagIdentified</codeph> method: 
		  <codeblock>(void)onMediaPlayerSubscribedTagIdentified:(NSNotification *)notification
{
NSDictionary *userInfo = [notification userInfo];
PTTimedMetadata *timedMetadata = (PTTimedMetadata *)[userInfo objectForKey:PTTimedMetadataKey];
if (timedMetadata.type == PTTimedMetadataTypeID3)
Unknown macro: { PTMetadata *metadata = (PTMetadata *)timedMetadata; NSString * nstr = [[NSString alloc] initWithFormat}

}</codeblock> 
		</p> 
		<p>After you parse the ID3 tag, extract the Nielsen-specific metadata
		  using the following: 
		  <codeblock>
    (NSString *)parseNielsenUrlFromID3Tag:(NSString *)str
    {
    /* ID3 tag &lt;AVMetadataItem: 0x15e58e60, identifier=id3/PRIV, keySpace=org.id3, key class = __NSCFString, key=PRIV, commonKey=(null), extendedLanguageTag=(null), dataType=(null), time= {110265598/4410000 = 25.004}

    , duration=
    {INVALID}

    , startDate=(null), extras=
    { info = "www.nielsen.com/X100zdCIGeIlgZnkYj6UvQ==/pI-X5FFk07770SXf2ZbI6g==/CE0C6&#x200B;1TsDo0jIrNn9N2yTPe6nVG3dHZHfgS52fJeQjf9fJCga9tj4OW4NXPZ9fI1mx0gfYUPBXnjqolHemZPtn_FCoNg&#x200B;8Dqw8-Auruf15fU04pJfXTTN0IgZ4iWBmeRiPpS9X100zdCIGeIlgZnkYj6UvVjmPIdY5jyRQTA=/00000/21778/00"; }

    , value length=1&gt;
    */

NSString *nielsenStr = nil;
for (NSString *keyValuePairString in [str componentsSeparatedByString:@", "])
{
if([keyValuePairString rangeOfString:@"nielsen.com"].location != NSNotFound)
{ // Nielsen NSRange start = [keyValuePairString rangeOfString:@"\""]; NSRange end = [keyValuePairString rangeOfString:@"\";"]; nielsenStr = [keyValuePairString substringWithRange:NSMakeRange(start.location + 1, end.location-start.location)]; }

}
return nielsenStr;
}</codeblock> 
		</p> 
	 </example> 
  </taskbody> 
</task> 