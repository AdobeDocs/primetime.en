<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_allow-user-to-change-track"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Allow users to change the caption track</title> 
  <shortdesc>This procedure is an example of how to create a button that allows
	 a user to select a closed caption track. 
  </shortdesc> 
  <taskbody> 
	 <steps importance="optional" id="steps_FDFB41121A544693888B61F084BADA63"> 
		<step id="step_08075A6F1CA448D19E1ECF52A0EE3D28"> 
		  <cmd>Create a button to change the closed caption track. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax xml">&lt;Button
  android:id="@+id/selectCC"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:layout_alignParentBottom="true"
  android:layout_alignParentRight="true"
  android:layout_marginRight="10dp"
  android:onClick="selectClosedCaptioningClick"
  android:text="CC" /&gt;
</codeblock> 
		  </info> 
		</step> 
		<step id="step_80AD3390D4E3457C858AC83B7FC2A23F"> 
		  <cmd>Convert the list of available closed caption tracks to a string
			 array. 
		  </cmd> 
		  <info> 
			 <p>The closed caption tracks that have activity, that is, channels
				for which <ph conkeyref="phrases/primetime-sdk-name"/> has discovered data, are marked accordingly. 
			 </p> 
			 <codeblock outputclass="syntax java">/**
* Converts the closed captions tracks to a string array.
*
* @return array of CC tracks
*/
private String[] getCCsAsArray() {
    List&lt;String&gt; closedCaptionsTracksAsStrings = new ArrayList&lt;String&gt;();
    MediaPlayerItem currentItem = mediaPlayer.getCurrentItem();
    if (currentItem != null) {
        List&lt;ClosedCaptionsTrack&gt; closedCaptionsTracks =
        currentItem.getClosedCaptionsTracks();
        Iterator&lt;ClosedCaptionsTrack&gt; iterator = closedCaptionsTracks.iterator();
        while (iterator.hasNext()) {
            ClosedCaptionsTrack closedCaptionsTrack = iterator.next();
            String isActive = closedCaptionsTrack.isActive() ? " (" + 
              getString(R.string.active)+ ")" : "";
            closedCaptionsTracksAsStrings.add(closedCaptionsTrack.getName() + 
              isActive);
        }
    }
    return closedCaptionsTracksAsStrings.
      toArray(new String[closedCaptionsTracksAsStrings.size()]);
}
</codeblock> 
		  </info> 
		</step> 
		<step id="step_66DD252E4002418F828D57573929C651"> 
		  <cmd>When the user clicks the button, display a dialog that lists all
			 the default closed caption tracks. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">public void selectClosedCaptioningClick(View view) {
    Log.i(LOG_TAG + "#selectClosedCaptions", "Displaying closed captions chooser dialog.");
    final String items[] = getCCsAsArray();
    final AlertDialog.Builder ab = new AlertDialog.Builder(this);
    ab.setTitle(R.string.PlayerControlCCDialogTitle);
    ab.setSingleChoiceItems(items, selectedClosedCaptionsIndex, new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int whichButton) {
            // Select the new closed captioning track.
            MediaPlayerItem currentItem = mediaPlayer.getCurrentItem();
            ClosedCaptionsTrack desiredClosedCaptionsTrack = 
              currentItem.getClosedCaptionsTracks().get(whichButton);
            boolean result = currentItem.selectClosedCaptionsTrack(desiredClosedCaptionsTrack);
            if (result) {
                selectedClosedCaptionsIndex = whichButton;
            }
            // Dismiss dialog.
            dialog.cancel();
     }
    }).setNegativeButton(R.string.PlayerControlCCDialogCancel, new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int whichButton) {
            // Just cancel the dialog.
        }
    });
    ab.show();
}
</codeblock> 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
