<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="drm-before-playback-task"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>DRM authentication before playback</title> 
  <shortdesc>When the DRM metadata for a video is separate from the media
	 stream, you should authenticate before you beginning the playback. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_3CFD5777EDDE4B50832C5ADBF4F30A65"> 
		<p>A video asset can have an associated DRM metadata file, for example,: 
		<ul id="ul_0DA8FECFEB744D4AB3CDF20DC1303B56"> 
		  <li id="li_BA1834755D0E4B7E9D854B63677B14AA"><codeph>"url":
				"http://www.domain.com/asset.m3u8" 
			 </codeph>
		  </li> 
		  <li id="li_C683E346FEB946FE999DFA9EEBC0B5FF"><codeph>"drmMetadata":
				"http://www.domain.com/asset.metadata" 
			 </codeph>
		  </li> 
		</ul> 
		</p> 
		<p>In this example, you can use 
		  <codeph>DRMHelper</codeph> methods to download the contents of the DRM
		  metadata file, parse it, and check whether DRM authentication is needed. 
		</p> 
	 </context> 
	 <steps id="steps_B1281C5F7D6E4393936F17E3F5B088BE"> 
		<step id="step_73E8C8C3B84F41DEA7EACAB60345A062"> 
		  <cmd>Use 
			 <codeph>loadDRMMetadata</codeph> to load the metadata URL content and
			 parse the downloaded bytes to a 
			 <codeph>DRMMetadata</codeph>. 
		  </cmd> 
		  <info>
			 <note type="tip">This method is asynchronous and creates its own
				thread. 
			 </note>
			 <p> 
				<codeblock outputclass="syntax java">public static void loadDRMMetadata(
    final DRMManager drmManager,
    final String drmMetadataUrl, 
    final DRMLoadMetadataListener loadMetadataListener); </codeblock> 
			 </p> 
			 <p>For example: 
			 </p> 
			 <codeblock outputclass="syntax java">DRMHelper.loadDRMMetadata(drmManager, 
                                   metadataURL, 
                                   new DRMLoadMetadataListener());</codeblock>
		  </info> 
		</step> 
		<step id="step_0E037FEE13344D0182F32769251162E3"> 
		  <cmd>Notify the user that this operation is asynchronous, it is a good
			 idea to make the user aware of that. 
		  </cmd> 
		  <info>
			 <p>If users do not know that the operation is asynchronous, they
				might wonder why playback has not yet started. You can, for example, show a
				spinner wheel while the DRM metadata is being downloaded and parsed. 
			 </p>
		  </info> 
		</step> 
		<step id="step_F7665A6FFC5747FD834CB8B0A8380D21"> 
		  <cmd>Implement the callbacks in the 
			 <codeph>DRMLoadMetadataListener</codeph>. 
		  </cmd> 
		  <info>
			 <p>The <codeph>loadDRMMetadata</codeph> calls these event handlers.
						<codeblock outputclass="syntax java">public interface DRMLoadMetadataListener {

    public void onLoadMetadataUrlStart();

    /**
    * @param authNeeded
    *     whether DRM authentication is needed.
    * @param drmMetadata
    *     the parsed DRMMetadata obtained.    */
    public void onLoadMetadataUrlComplete(boolean authNeeded, DRMMetadata drmMetadata);
    public void onLoadMetadataUrlError();
}
</codeblock>
					</p>
			 <p>Here are additional details about the handlers: <ul id="ul_33CBA998C47347E4BD1ABD76F32C6D5B">
							<li id="li_8DD21E2EA8E64C979DE0257032825805">
								<codeph>onLoadMetadataUrlStart</codeph> detects when the metadata
								URL loading has begun. </li>
							<li id="li_4C3531500C9F4DA48661AD8C4F04BBF0">
								<codeph>onLoadMetadataUrlComplete</codeph> detects when the metadata
								URL has finished loading. </li>
							<li id="li_EA14A39192CF419D93F7A7382130B3CA">
								<codeph>onLoadMetadataUrlError</codeph> indicates that the metadata
								failed to load. </li>
						</ul>
					</p> 
		  </info> 
		</step> 
		<step id="step_15FB81595B084CFF923AB46FCB5CA46C"> 
		  <cmd>After the loading is complete, inspect the 
			 <codeph>DRMMetadata</codeph> object to determine whether DRM
			 authentication is required. 
		  </cmd> 
		  <info> 
			 <p>
				<codeblock outputclass="syntax java">public static boolean isAuthNeeded(DRMMetadata drmMetadata);</codeblock>
			 </p> 
			 <p>For example:
						<codeblock outputclass="syntax java">@Override
public void onLoadMetadataUrlComplete(boolean authNeeded, DRMMetadata drmMetadata) { 
    Log.i(LOG_TAG + "#onLoadMetadataUrlComplete", 
          "Loaded metadata URL contents. Auth needed:" + authNeeded + ".");
    if (!authNeeded) {
        // Auth is not required. Start player activity.    
        showLoadingSpinner(false);    
        startPlayerActivity(ASSET_URL);
        return;
    }
}
</codeblock>
					</p>
		  </info> 
		</step> 
		<step id="step_76EF78C940324BFB930370AF0C50E10B"> 
		  <cmd>Complete one of the following tasks:
		  </cmd> 
		  <info>
			 <ul id="ul_FBFB9B12E4414EE98BCA4CF0015510B0">
				<li id="li_F0BBB9BB5C5A4A55B28C95C1984700DA">If authentication is
				  not required, begin playback. 
				</li>
				<li id="li_E541A036C02C425C8C113C8C339622E9">If authentication is
				  required, complete the authentication by acquiring the license. 
				  <p>
					 <codeblock outputclass="syntax java">/**
* Helper method to perform DRM authentication.
*
* @param drmManager
* the DRMManager, used to perform the authentication.
* @param drmMetadata
* the DRMMetadata, containing the DRM specific information.
* @param authenticationListener
* the listener, on which the user can be notified about the
* authentication process status.
*/
public static void performDrmAuthentication(
     final DRMManager drmManager, 
     final DRMMetadata drmMetadata,
     final String authUser, 
     final String authPass, 
     final DRMAuthenticationListener authenticationListener);</codeblock>
				  </p>
				  <p>In this example, for simplicity, the userâ€™s name and password are explicitly coded:
								<codeblock outputclass="syntax java">DRMHelper.performDrmAuthentication(drmManager, 
                                   drmMetadata, 
                                   DRM_USERNAME, 
                                   DRM_PASSWORD, new DRMAuthenticationListener() {
    @Override
    public void onAuthenticationStart() {
        Log.i(LOG_TAG + "#onAuthenticationStart", "DRM authentication started.");
        // Spinner is already showing.
    }
    @Override
    public void onAuthenticationError(int major, 
                                      int minor, 
                                      String errorString, 
                                      String serverErrorURL) {
        Log.e(LOG_TAG + 
              "#onAuthenticationError", 
              "DRM authentication failed. " + 
              major + " 0x" + Long.toHexString(minor));
        showToast(getString(R.string.drmAuthenticationError));  
        showLoadingSpinner(false);
    }
    @Override
    public void onAuthenticationComplete(byte[] authenticationToken) {
        Log.i(LOG_TAG + 
              "#onAuthenticationComplete", "Auth successful. Launching content.");
        showLoadingSpinner(false);
        startPlayerActivity(ASSET_URL);
    }
});
</codeblock>
							</p>
				</li>
			 </ul>
		  </info>
		</step> 
		<step id="step_EE8B07849F34433EAA141DF02E0E10F5"> 
		  <cmd>Use an event listener to check the authentication status. 
		  </cmd> 
		  <info>
			 <p>This process implies network communication, so this is also an
				asynchronous operation. 
			 </p> 
			 <codeblock outputclass="syntax java">public interface DRMAuthenticationListener {
    /**
    *       Called to indicate that DRM authentication has started.
    */
    public void onAuthenticationStart();
    /**
    *       Called to indicate that DRM authentication has been successful.
    *
    * @param authenticationToken
    *       the obtained token, which can be stored locally.
    */
    public void onAuthenticationComplete(byte[] authenticationToken);
    /**
    *       Called to indicate that an error occurred while performing the DRM
    *       authentication.
    *
    * @param major
    *       the major code.
    * @param minorC
    *       the minor code.
    * @param errorString
    *       the exception thrown.
    * @param serverErrorURL
    *       the URL of the server 
    *       on which the error occurred
    */
    public void onAuthenticationError(int major, 
                                      int minor, 
                                      String errorString, 
                                      String serverErrorURL);
}
</codeblock> 
		  </info> 
		</step> 
		<step id="step_72CFDBD557604C8DA5062FFC0203114B"> 
		  <cmd>If authentication is successful, start the playback. 
		  </cmd> 
		</step> 
		<step id="step_24DEC0D971034EB393BBA8274CA43924"> 
		  <cmd>If authentication is not successful, notify the user and do not
			 start playback. 
		  </cmd> 
		  <info> Your application must handle any authentication errors. Failing
			 to successfully authenticate before playing places <ph conkeyref="phrases/primetime-sdk-name"/> in an error state, and
			 the playback stops. Your application must resolve the issue, reset the player,
			 and reload the resource. 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
