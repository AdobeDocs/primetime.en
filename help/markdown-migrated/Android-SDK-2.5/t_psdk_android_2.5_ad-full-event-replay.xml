<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_ad-full-event-replay"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Enable ads in full-event replay</title> 
  <shortdesc>Full-event replay (FER) is a VOD asset that acts as a live/DVR
	 asset, so your application must take steps to ensure that ads are placed
	 correctly. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_A2316833F48B411CA3A1F3C801BBA4FB"> 
		<p>For live content, <ph conkeyref="phrases/primetime-sdk-name"/> uses the metadata/cues in the manifest to
		  determine where to place ads. However, sometimes live/linear content might
		  resemble VOD content. For example, when live content completes, an 
		  <codeph>EXT-X-ENDLIST</codeph> tag is appended to the live manifest.
		  For HLS, the 
		  <codeph>EXT-X-ENDLIST</codeph> tag means that the stream is a VOD
		  stream. To correctly insert ads, <ph conkeyref="phrases/primetime-sdk-name"/> cannot automatically differentiate this
		  stream from a typical VOD stream. 
		</p> 
		<p>Your application must tell <ph conkeyref="phrases/primetime-sdk-name"/> whether the content is live or VOD by
		  specifying the 
		  <codeph>AdSignalingMode</codeph>. 
		</p> 
		<p>For a FER stream, the 
		  <ph conkeyref="phrases/auditude-name-long"/> server should not provide
		  the list of ad breaks that need to be inserted on the timeline before starting
		  the playback. This is the typical process for VOD content. Instead, by
		  specifying a different signaling mode, <ph conkeyref="phrases/primetime-sdk-name"/> reads all the cue points from the
		  FER manifest and goes to the ad server for each cue point to request an ad
		  break. This process is similar to live/DVR content. 
		</p> 
		<note type="tip">In addition to each request that is associated with a
		  cue point, <ph conkeyref="phrases/primetime-sdk-name"/> makes an additional ad request for pre-roll ads. 
		</note> 
	 </context> 
	 <steps id="steps_ABFFE85BF742453391403E60DF3FB145"> 
		<step id="step_73788668F4A9482DA316A4B7FB7E81E8"> 
		  <cmd>From an external source, such as vCMS, obtain the signaling mode
			 that should be used. 
		  </cmd> 
		</step> 
		<step id="step_043E43EC0D67423A9043881A4B26B0AA"> 
		  <cmd>Create the advertising-related metadata. 
		  </cmd> 
		</step> 
		<step id="step_08931339B9C143D7B8D88F07668AAEB3"> 
		  <cmd>If the default behavior must be overwritten, specify the 
			 <codeph>AdSignalingMode</codeph> by using 
			 <codeph>AdvertisingMetadata.setSignalingMode</codeph>. 
		  </cmd> 
		  <info> 
			 <p>The valid values are 
				<codeph>DEFAULT</codeph>, 
				<codeph>SERVER_MAP</codeph>, and 
				<codeph>MANIFEST_CUES</codeph>. 
			 </p>
			 <note type="important">You must set the ad signaling mode before
				calling 
				<codeph>prepareToPlay</codeph>. After <ph conkeyref="phrases/primetime-sdk-name"/> starts to resolve and
				place ads on the timeline, changes to the ad signaling mode are ignored. Set
				the mode when you create the 
				<codeph>AuditudeSettings</codeph> object. 
			 </note> 
		  </info> 
		</step> 
		<step id="step_C0863350615E49BCB2DF2F4D0B90A49F"> 
		  <cmd>Continue to playback. 
		  </cmd> 
		</step> 
	 </steps> 
	 <example id="example_6DECA71C3C3B4551805C09A80686552F"> 
		<codeblock outputclass="syntax java">MediaPlayer mediaPlayer = 
  new MediaPlayer(getActivity.().getApplicationContext());

AuditudeSettings auditudeSettings = new AuditudeSettings();
auditudeSettings.setSignalingMode(AdSignalingMode.MANIFEST_CUES);
auditudeSettings.setDomain("your-auditude-domain");
auditudeSettings.setZoneId("your-auditude-zone-id");
auditudeSettings.setMediaId("your-media-id");
// set additional targeting parameters or custom parameters

MediaPlayerItemConfig itemConfig = 
  new MediaPlayerItemConfig(getActivity().getApplicationContext());
MediaResource mediaResource = 
  new MediaResource("http://example.com/media/test_media.m3u8", 
                    MediaResource.Type.HLS, Metadata);

mediaPlayer.addEventListener(MediaPlayerEvent.STATUS_CHANGED, 
  new StatusChangeEventListener() {
    @Override
    public void onStatusChanged(MediaPlayerStatusChangeEvent event) {
        if (status == MediaPlayerStatus.INITIALIZED) {
            mediaPlayer.prepareToPlay();
        }
        else if( event.getStatus() == MediaPlayerStatus.PREPARED ) {
            // <ph conkeyref="phrases/primetime-sdk-name"/> is in the PREPARED state, so start the playback
            mediaPlayer.play();
        }
        else if( event.getStatus() == MediaPlayerStatus.COMPLETE ) {
            // playback has reached the end of stream ( ads included )
            // if we want to rewind we can call
            mediaPlayer.seek(mediaPlayer.getSeekableRange().getBegin());
        }
    }
});

mediaPlayer.replaceCurrentResource(mediaResource, itemConfig);
</codeblock> 
	 </example> 
  </taskbody> 
</task> 
