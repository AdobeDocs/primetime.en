<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="custom-ad-markers-on-timeline"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Placing custom ad markers on the timeline</title> 
  <shortdesc>This example shows the recommended way to include custom ad
	 markers on the playback timeline. 
  </shortdesc> 
  <taskbody> 
	 <steps id="steps_D115EF297C6D43D0852FBE9D38FB209B"> 
		<step id="step_99E8CC7C34CC4BCF869D247812806083"> 
		  <cmd>Translate the out-of-band ad-positioning information into a
			 list/array of 
			 <codeph>RepaceTimeRange</codeph> class. 
		  </cmd> 
		</step> 
		<step id="step_4274A115F6B049A2895C7BD7218ABE6B"> 
		  <cmd>Create an instance of 
			 <codeph>CustomRangeMetadata</codeph> class, and use its 
			 <codeph>setTimeRangeList</codeph> method with the list/array as its
			 argument to set its time range list. 
		  </cmd> 
		</step> 
		<step id="step_289E7D1D6F9448C5ABDA91E8C2EE870F"> 
		  <cmd>Use its 
			 <codeph>setType</codeph> method to set the type to 
			 <codeph>MARK_RANGE</codeph>. 
		  </cmd> 
		</step> 
		<step id="step_B164960484174DD4B96454AA63681E09"> 
		  <cmd>Use the 
			 <codeph>MediaPlayerItemConfig.setCustomRangeMetadata</codeph> method
			 with the 
			 <codeph>CustomRangeMetadata</codeph> instance as its argument to set
			 the custom range metadata. 
		  </cmd> 
		</step> 
		<step id="step_D9BE493943D34BF1ADE3A28D26C931A9"> 
		  <cmd>Use the 
			 <codeph>MediaPlayer.replaceCurrentResource</codeph> method with the 
			 <codeph>MediaPlayerItemConfig</codeph> instance as its argument to
			 set make the new resource the current one. 
		  </cmd> 
		</step> 
		<step id="step_638009365DB64197A0188D5023AD4663"> 
		  <cmd>Wait for a 
			 <codeph>STATE_CHANGED</codeph> event, which reports that the player
			 is in the 
			 <codeph>PREPARED</codeph> state. 
		  </cmd> 
		</step> 
		<step id="step_108CC4DC378E4317BB669E9022E3DEEA"> 
		  <cmd>Start video playback by calling 
			 <codeph>MediaPlayer.play</codeph>. 
		  </cmd> 
		</step> 
	 </steps> 
	 <result id="result_D6143810C9ED4AAAAE11C024EBEC9C59">Here is the result of
		completing the tasks in this example: 
		<ul id="ul_B0BEB6E1C74C46F8BBBEAEFE930E5F5E"> 
		  <li id="li_024513177EC745EBBB2309E3D29A7D36"> If a 
			 <codeph>ReplaceTimeRange</codeph> overlaps another on the playback
			 timeline, for example, the start position of a 
			 <codeph>ReplaceTimeRange</codeph> is earlier than an already placed
			 end position, <ph conkeyref="phrases/primetime-sdk-name"/> silently adjusts the start of the offending 
			 <codeph>ReplaceTimeRange</codeph> to avoid the conflict. 
			 <p>This makes the adjusted 
				<codeph>ReplaceTimeRange</codeph> shorter than originally
				specified. If the adjustment leads to a duration of zero, <ph conkeyref="phrases/primetime-sdk-name"/> silently drops
				the offending 
				<codeph>ReplaceTimeRange</codeph>. 
			 </p> 
		  </li> 
		  <li id="li_ADFBA1BB94A54F9C847BBDD4FFD646DE"> <ph conkeyref="phrases/primetime-sdk-name"/> looks for adjacent
			 time ranges for custom ad breaks and clusters them into separate ad breaks. 
			 <p>Time ranges not adjacent to any other time range are translated
				into ad breaks that contain a single ad. 
			 </p> 
		  </li> 
		  <li id="li_6DCBD9440D9142C1A697F769B4A33480"> If the application tries
			 to load a media resource whose configuration contains 
			 <codeph>CustomRangeMetadata</codeph> that can be used only in the
			 context custom ad markers, <ph conkeyref="phrases/primetime-sdk-name"/> throws an exception if the underlying asset is
			 not of type VOD. 
		  </li> 
		  <li id="li_9F98F276BA0144E197AF6520558A6C76"> When dealing with custom
			 ad markers, <ph conkeyref="phrases/primetime-sdk-name"/> deactivates other ad-resolving mechanisms (for example, 
			 <ph conkeyref="phrases/auditude-name-long"></ph>). 
			 <p>You can use any <ph conkeyref="phrases/primetime-sdk-name"/> ad-resolver module or the custom ad markers
				mechanism. When you use custom ad markers, the ad content is considered
				resolved and is placed on the timeline. 
			 </p> 
		  </li> 
		</ul> 
	 </result> 
	 <example id="example_B80623FC452E416AA9BB808CBE672551"> 
		<p>The following code snippet places three time ranges on the timeline as
		  custom ad-markers. 
		</p> 
		<codeblock outputclass="syntax java">// Assume that the 3 time ranges are obtained through external means
// Use them to populate the ReplaceTimeRange instance
List&lt;ReplaceTimeRange&gt; timeRanges = new ArrayList&lt;ReplaceTimeRange&gt;();
timeRanges.add(new ReplaceTimeRange(0,10000, 0));
timeRanges.add(new ReplaceTimeRange(15000,20000, 0));
timeRanges.add(new ReplaceTimeRange(25000,30000, 0));

CustomRangeMetadata customRangeMetadata = new CustomRangeMetadata();
customRangeMetadata.setTimeRangeList(timeRanges);
customRangeMetadata.setType(CustomRangeMetadata.CustomRangeType.MARK_RANGE);

//Create a MediaResource instance
MediaResource mediaResource = MediaResource.createFromUrl(
        "www.example.com/video/test_video.m3u8", timeRanges.toMedatada(null));

// Create a MediaPlayerItemConfig instance
MediaPlayerItemConfig config = 
  new MediaPlayerItemConfig(getActivity().getApplicationContext());

// Set customRangeMetadata
config.setCustomRangeMetadata(customRangeMetadata);

// Prepare the content for playback by calling replaceCurrentResource
// NOTE: mediaPlayer is an instance of a properly configured MediaPlayer 
mediaPlayer.replaceCurrentResource(mediaResource, config);

// wait for <ph conkeyref="phrases/primetime-sdk-name"/> to reach the PREPARED state
mediaPlayer.addEventListener(MediaPlayerEvent.STATE_CHANGED, 
  new StatusChangeEventListener() {
    @Override
    public void onStatusChanged(MediaPlayerStatusChangeEvent event) {

    if( event.getStatus() == MediaPlayerStatus.PREPARED ) {
        // <ph conkeyref="phrases/primetime-sdk-name"/> is in the PREPARED state, so start the playback 
        mediaPlayer.play();
    }
    ...
}</codeblock> 
	 </example> 
  </taskbody> 
</task> 
