<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_set-up-event-listeners"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Implement event listeners and callbacks</title> 
  <shortdesc>Event handlers enable you to respond to <ph conkeyref="phrases/primetime-sdk-name"/> events. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_0ED093909F1746A9B47FA8671BDCF853"> 
		<p>When an event occurs, <ph conkeyref="phrases/primetime-sdk-name"/>'s event mechanism calls your registered
		  event handler, passing it the event information. 
		</p> 
		<p><ph conkeyref="phrases/primetime-sdk-name"/> defines listeners as public internal interfaces inside the 
		  <codeph>MediaPlayer</codeph> interface. 
		</p> 
		<p> Your application must implement event listeners for any <ph conkeyref="phrases/primetime-sdk-name"/> events
		  that affect your application. 
		</p> 
	 </context> 
	 <steps id="steps_1F2850BAA2864D72B63BA80F3119B060"> 
		<step id="step_037385F1CFFA43B1977E11BEAEBDEDFB"> 
		  <cmd>Determine which events your application must listen for. 
		  </cmd> 
		  <info> 
			 <ul id="ul_40A89DFEFA964A329F09169E138DD041"> 
				<li id="li_3681BA56A51C45B29074F8EB250A70C8">Required events: Listen for all playback events.
								<note type="important">Listen for the status change event, which
								occurs when the player's status changes in ways that you need to
								know. The information it provides includes errors that might affect
								what your player can do next. </note>
						</li> 
				<li id="li_69D4947141EC44C1A942B989D18998CC">For other events,
				  depending on your application, see 
				  <xref keyref="events-summary"/>. 
				</li> 
			 </ul> 
		  </info> 
		</step> 
		<step id="step_F06530D3D2DA4E46A5E7FC85FCF206CA"> 
		  <cmd>Implement and add an event listener for each event. 
		  </cmd> 
		  <info> For most events <ph conkeyref="phrases/primetime-sdk-name"/> passes arguments to the event listeners.
			 Such values provide information about the event that can help you decide what
			 to do next. 
		  </info> 
		  <info>The 
			 <codeph>MediaPlayerEvent</codeph> enumeration lists all the events
			 that 
			 <codeph>MediaPlayer</codeph> dispatches. For more information, see 
			 <xref keyref="events-summary"/>. 
		  </info> 
		  <stepxmp> For example, if <codeph>mPlayer</codeph> is an instance of
						<codeph>MediaPlayer</codeph>, here is how you might add and structure an
					event listener:
					<codeblock outputclass="syntax java">mPlayer.addEventListener(MediaPlayerEvent.STATUS_CHANGED, new StatusChangeEventListener() {
    @Override
    public void onStatusChanged(MediaPlayerStatusChangeEvent event) {
        event.getMetadata();
        if (event.getMetadata() != null) {/* Do something */}
        if (event.getStatus() == MediaPlayerStatus.IDLE) {/* Do something */}
        else if (event.getStatus() == MediaPlayerStatus.INITIALIZED) {/* Do something */}
        else if (event.getStatus() == MediaPlayerStatus.PREPARED) {/* Do something */}
    }
});
</codeblock>
				</stepxmp> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
