<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_construct-ctrl-bar-for-dvr"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Construct a control bar enhanced for DVR</title> 
  <shortdesc>You can implement a control bar with DVR support for VOD and live
	 streaming. DVR support includes the concept of a seekable window and the client
	 live point. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_FB667613B051450983313FE06E7E84E4"> 
		<ul id="ul_DEF1BF52E5454DF7B82D9691CCC0D5AD"> 
		  <li id="li_2E0782C06B5A4530BCE5DF0A15A68C79">For VOD, the length of the
			 seekable window is the duration of the entire asset. 
		  </li> 
		  <li id="li_10F83080ADA4494B811B3BFEC05E5087">For live streaming, the
			 length of the DVR (seekable) window is defined as the time range that starts at
			 the live playback window and ends at the client live point. 
			 <p>Remember the following information: 
			 <ul id="ul_511CA669EBEF4696BD3AFD7D9469F1BA">
				<li id="li_80A1E442DEFD4E1A8E7EB7CD802973D3">The client live point
				  is calculated by subtracting the buffered length from the live window end. 
				  <p>The target duration is a value bigger than or equal to the
					 maximum duration of a fragment in the manifest. 
				  </p>
				</li>
				<li id="li_E516B35EB6074B22B138E6521E9123D5">The default value is
				  10000 ms. 
				</li>
				<li id="li_3BAA367F2F1C4571BB493AAD06AC5D41">The control bar for
				  live playback supports DVR by first positioning the thumb at the client live
				  point when starting playback and by displaying a region that marks the area
				  where seek is not allowed. 
				</li>
			 </ul>
			 </p>
		  </li> 
		</ul>
		<p>
		  <fig frame="all" id="fig_37A39A28BA714BA5A2C461357ED5BD41">
					<image href="images/dvr-window.PNG" height="97" width="684" align="left"
						id="image_mjx_5vn_1p"/>
				</fig>
		</p> 
	 </context> 
	 <steps id="steps_DE587E60CD204CC89AF73D31014D14D8"> 
		<step id="step_FFF0BBBB7CEB41A3B7F0D2585DA206C2"> 
		  <cmd>To implement a control bar with DVR support, follow the steps in 
			 <xref
			  href="t_psdk_android_2.5_ui-seek-scrub-bar-display.xml#display-seek-scrub-bar"
			  format="dita" scope="local"><?xm-replace_text Display a seek scrub bar with the current playback position...?></xref>
			 with the following differences: 
		  </cmd> 
		  <info> 
			 <p>
			 <ul id="ul_B92A2AFE685A47D7BC0282443C4371F1"> 
				<li id="li_CAC2467633C044A6884EDEF8285DEE3D">You can implement a
				  control bar that is mapped only for the seekable range instead of for the
				  playback range. 
				  <p>Any user interaction for seek can be considered safe in the
					 seekable range. 
				  </p>
				</li> 
				<li id="li_E946D44A5C0141AA988E2A477BCB7257">You can implement a
				  control bar that is mapped for the playback range but that also displays the
				  seekable range. 
				</li> 
			 </ul>
			 </p>
			 <p>For a control bar: 
			 <ol id="ol_102F096551BA4594861FB5EDE496B97F"> 
				<li id="li_439068BB9D584C23A7D502C3B3C074BD">Add an overlay to the
				  control bar that represents the playback range. 
				</li> 
				<li id="li_A8B5E7B0F3074B7C8EA5E9BE82D8CC3F">When the user starts
				  to seek, check whether the desired seek position is within the seekable range
				  using 
				  <codeph>MediaPlayer.getSeekableRange</codeph>. 
				</li> 
			 </ol>
			 </p> 
			 <p>For example: 
				<codeblock outputclass="syntax java">TimeRange seekableRange = _mediaPlayer.getSeekableRange();
if (seekableRange.contains(desiredSeekPosition)) {
    _mediaPlayer.seek(desiredPosition);
}</codeblock>
			 </p>
			 <p>You can also choose to seek to the client live point using the 
				<codeph>MediaPlayer.LIVE_POINT</codeph> constant. 
				<codeblock>mediaPlayer.seek(MediaPlayer.LIVE_POINT);</codeblock> 
			 </p>
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
