<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_inspect-playback-timeline"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Inspect the playback timeline</title> 
  <shortdesc>You can obtain a description of the timeline associated with the
  	currently selected item being played by <ph conkeyref="phrases/primetime-sdk-name"/>.
	 This is most useful when your application displays a custom scrub-bar control
	 in which the content sections that correspond to ad content are identified. 
  </shortdesc> 
  <taskbody> 
	 <context> 
		<p>Here is an example implementation as seen in the following screen shot.  <fig frame="all">
					<image href="images/inspect-playback.jpg" height="230.400pt" width="368.641pt"
						align="left" placement="break"/>
				</fig>
			</p> 
	 </context> 
	 <steps> 
		<step>
				<cmd>Access the <codeph>Timeline</codeph> object in the <codeph>MediaPlayer</codeph>
					using the <codeph>getTimeline</codeph> method. </cmd>
				<info>
					<p>The <codeph>Timeline</codeph> class encapsulates the information that is
						related to the contents of the timeline that is associated with the media
						item that is currently loaded by the <codeph>MediaPlayer</codeph> instance.
						The <codeph>Timeline</codeph> class provides access to a read-only view of
						the underlying timeline. The <codeph>Timeline</codeph> class provides a
						getter method that provides <ph>an iterator through </ph>a list of
							<codeph>TimelineMarker</codeph> objects. </p>
				</info>
			</step> 
		<step> 
		  <cmd>Iterate through the list of 
			 <codeph>TimelineMarkers</codeph> and use the returned information to
			 implement your timeline. 
		  </cmd> 
		  <info> 
			 <p>A 
				<codeph>TimelineMarker</codeph> object contains two pieces of
				information: 
			 </p> 
			 <ul> 
				<li>Position of the marker on the timeline (in milliseconds)</li> 
				<li>Duration of the marker on the timeline (in milliseconds)</li> 
			 </ul> 
		  </info> 
		</step> 
		<step>
				<cmd>Implement the listener callback interface
						<codeph>MediaPlayer.PlaybackEventListener.onTimelineUpdated</codeph> and
					register it with the <codeph>Timeline</codeph> object.  </cmd>
				<info>The <codeph>Timeline</codeph> object can inform your application about changes
					that might occur in the playback timeline by calling your
						<codeph>OnTimelineUpdated</codeph> listener. </info>
			</step> 
	 </steps> 
	 <example> 
		<codeblock  outputclass="syntax java">// access the timeline object
Timeline timeline = mediaPlayer.getTimeline();
// iterate through the list of TimelineMarkers
Iterator&lt;TimelineMarker&gt; iterator = timeline.timelineMarkers();
while (iterator.hasNext()) {
   TimelineMarker marker = iterator.next();
   // the start position of the marker
   long startPos = marker.getTime();
   // the duration of the marker
   long duration = marker.getDuration();
}</codeblock> 
	 </example> 
  </taskbody> 
</task> 
