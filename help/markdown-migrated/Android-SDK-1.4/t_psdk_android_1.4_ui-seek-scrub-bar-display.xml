<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="display-seek-scrub-bar"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Display a seek scrub bar with the current playback position</title> 
  <shortdesc>
		<ph conkeyref="phrases/primetime-sdk-name"/> supports seeking to a specific position (time)
		where the stream is a sliding-window playlist, in both video on demand (VOD) and live
		streams. </shortdesc> 
  <taskbody> 
	 <context id="context_5304B355209C4ED791DBB22DA7C7DC5E"> 
		<note type="important" >Seeking in a live stream is
		  allowed only for DVR. 
		</note> 
	 </context> 
	 <steps id="steps_86B69320829D4BDF9A76779E6F08DBE5"> 
		<step id="step_CD4C65142DAD4C2D9C48FADB7A420D2D"> 
		  <cmd>Set up callbacks for seeking. 
		  </cmd> 
		  <info> 
			 <p>Seeking is asynchronous, so 
				<ph conkeyref="phrases/primetime-sdk-name"/> dispatches the
				following seek-related events: 
			 </p> 
			 <ul  
			  id="ul_1584FF635CF24FC6B15A87195894829F"> 
				<li
				 id="li_FCCD32AB33814DB486EFB13F1EA0414E"><codeph>QOSEventListener.onSeekStart</codeph>
				  - Seek starting. 
				</li> 
				<li id="li_3474FD51FEC04F1BA7C18F9FD29F6377"><codeph>QOSEventListener.onSeekComplete</codeph> -
							Seek successful. </li> 
				<li
				 id="li_EE90C8F250AA4D07B7C9243C71343006"><codeph>QOSEventListener.onOperationFailed</codeph>
				  - Seek failed. 
				</li> 
			 </ul> 
		  </info> 
		</step> 
		<step id="step_8E2EF2D0D4A44345A5FC020A800ABCB9">
				<cmd>Wait for the player to be in a valid state for seeking. </cmd>
				<info>
					<p>Valid states are PREPARED, COMPLETE, PAUSED, and PLAYING. </p>
				</info>
			</step> 
		<step id="step_5DA42882EBD849D6BAB85EEA0AE4C314" > 
		  <cmd>Use the native SeekBar to set 
			 <codeph>OnSeekBarChangeListener</codeph> to see when the user is
			 scrubbing. 
		  </cmd> 
		</step>
		<step id="step_07333CEE14E64940A02B756F2924AAFA" 
		>
		  <cmd>Listen for 
			 <codeph 
			 >QOSEventListener.onOperationFailed</codeph> and take appropriate
			 actions. 
		  </cmd>
		  <info> 
			 <p>This event passes the appropriate warning. Your application
				determines how to proceed, for instance, by trying the seek again or continuing
				playback from the previous position. 
			 </p> 
		  </info>
		</step>
		<step id="step_34DEDA8E544E47B69F6E8491B6C5449A" 
		>
		  <cmd>Wait for 
			 <ph conkeyref="phrases/primetime-sdk-name"/> to call the 
			 <codeph>QOSEventListener.onSeekComplete</codeph> callback.
		  </cmd>
		</step>
		<step id="step_1B0E02F1A7BF4F37ADB3A8423EA0DAF5" >
		  <cmd> Retrieve the final adjusted play position using the callback's
			 position parameter.
		  </cmd>
		  <info> 
			 <p>This is important because the actual start position after the seek
				can be different from the requested position. Playback behavior might be
				affected if a seek or other repositioning ends in the middle of an ad break or
				skips ad breaks. 
			 </p> 
		  </info>
		</step> 
		<step id="step_23840089A430443A8C6598DE4D157953"> 
		  <cmd>Use the position information when displaying a seek scrub bar. 
		  </cmd> 
		</step> 
	 </steps> 
	 <example id="example_9657AA855B6A4355B0E7D854596FFB54">
		<p ><b>Seeking Example</b>
		</p>
		<p>In this example, the user scrubs the seek bar to seek to the desired position.
				<codeblock outputclass="syntax java">// Use the native SeekBar to set OnSeekBarChangeListener to 
//see when the user is scrubbing.
seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean isFromUser) {
        if (isFromUser) {	
            // Update the seek bar thumb, with the position provided by the user.
            setPosition(progress);
        }
    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {
        isSeeking = true;
    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {
        isSeeking = false;
        // Retrieve the playback range.
        TimeRange playbackRange = mediaPlayer.getPlaybackRange();
        // Make sure to seek inside the playback range.
        long seekPosition = Math.min(Math.round(seekBar.getProgress()), 
                                     playbackRange.getDuration());
        // Perform seek.
        seek(playbackRange.getBegin() + seekPosition);
    }
};
</codeblock>
			</p> 
	 </example> 
  </taskbody> 
</task> 
