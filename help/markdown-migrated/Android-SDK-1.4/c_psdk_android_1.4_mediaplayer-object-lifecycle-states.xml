<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "technicalContent/dtd/concept.dtd">
<concept
 id="c_psdk_android_lifecycle-states-mediaplayer-object"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>MediaPlayer object lifecycle</title> 
  <shortdesc>From the moment that you create the <codeph>MediaPlayer</codeph> instance to the moment
		when you terminate (reuse or remove) it, this instance completes a series of transitions
		between states.</shortdesc> 
  <conbody> 
	 <p>Some operations are permitted only when the player is in a particular state. For example,
			calling <codeph>play</codeph> in <codeph>IDLE</codeph> is not allowed. You can call this
			status only after the player reaches the <codeph>PREPARED</codeph> state. </p> 
	 <p>To work with states: <ul id="ul_91E5504173694388A13C472857A6FF9F">
				<li id="li_29615A2CBB60456B9E4E94EF65CD2503">You can retrieve the current state of
					the <codeph>MediaPlayer</codeph> object with
						<codeph>MediaPlayer.getStatus</codeph>. <p>
						<codeblock outputclass="syntax java">PlayerState getStatus() throws IllegalStateException;</codeblock>
					</p>
				</li>
				<li id="li_1A49AF98EE0C4C62906641BC363F8D9C">The list of states is defined in
						<codeph>MediaPlayer.PlayerState</codeph>. </li>
			</ul>
		</p> 
	 <p>State-transition diagram for the lifecycle of a <codeph>MediaPlayer</codeph> instance: <fig
				frame="all" id="fig_1C55DE3F186F4B36AFFDCDE90379534C">
				<image href="images/player-state-transitions-diagram-android_1.2_web.png"
					id="image_D514C55E5B194C4EABC52FA8D4C3D337"/>
			</fig>
		</p> 
	 <p>The following table provides additional details: 
	 <table id="table_426F0093E4214EA88CD72A7796B58DFD"> 
		<tgroup cols="2"><colspec colnum="1" colname="col1"
		  colwidth="1.00*"/><colspec colnum="2" colname="col2" colwidth="1.41*"/><thead> 
			 <row> 
				<entry colname="col1">MediaPlayer.PlayerState  </entry> 
				<entry colname="col2">Occurs when 
				</entry> 
			 </row></thead> 
		  <tbody> 
			 <row > 
				<entry colname="col1"><codeph>IDLE</codeph></entry> 
				<entry colname="col2"> 
				  <p >Your application requested a new media
					 player by calling 
					 <codeph>DefaultMediaPlayer.create</codeph>. The newly created
					 player is waiting for you to specify a media player item. This is the media
					 player's initial state. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>INITIALIZING</codeph></entry> 
				<entry colname="col2"> 
				  <p>Your application called 
					 <codeph>MediaPlayer.replaceCurrentItem</codeph>, and the media
					 player is loading. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>INITIALIZED</codeph></entry> 
				<entry colname="col2"> 
				  <p><ph conkeyref="phrases/primetime-sdk-name"/> successfully set
					 the media player item. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>PREPARING</codeph></entry> 
				<entry colname="col2"> 
				  <p>Your application called 
					 <codeph>MediaPlayer.prepareToPlay</codeph>. The media player is
					 loading the media player item and the associated resources. 
				  </p> 
				  <note type="tip">Some buffering of the main media might occur. 
				  </note> 
				  <p><ph conkeyref="phrases/primetime-sdk-name"/> is preparing the
					 media stream and attempting to perform ad resolving and ad insertion, (if
					 enabled). 
				  </p> 
				  <note type="tip">To set the start time to a non-zero value, call 
					 <codeph>prepareToPlay(startTime)</codeph> with the time in
					 milleseconds. 
				  </note> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>PREPARED</codeph></entry> 
				<entry colname="col2"> 
				  <p>The content is prepared and ads have been inserted in the
					 timeline, or the ad procedure failed. Buffering or playback can begin. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>PLAYING</codeph></entry> 
				<entry colname="col2"> 
				  <p>Your application has called 
					 <codeph>play</codeph>, so 
					 <ph conkeyref="phrases/primetime-sdk-name"/> is trying to play
					 the video. Some buffering might occur before the video actually plays. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>PAUSED</codeph></entry> 
				<entry colname="col2"> 
				  <p>As your application plays and pauses the media, the media
					 player moves between this state and PLAYING. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>SUSPENDED</codeph></entry> 
				<entry colname="col2"> 
				  <p>Your application navigated away from the playback, shut down
					 the device, or switched applications while the player was playing or paused.
					 The media player has been suspended and resources have been released. To
					 continue, restore the media player. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>COMPLETE</codeph></entry> 
				<entry colname="col2"> 
				  <p>The player reached the end of the stream, and playback has
					 stopped. 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>RELEASED</codeph></entry> 
				<entry colname="col2"> 
				  <p>Your application has released the media player, which also
					 releases any associated resources. You can no longer use this instance 
				  </p> 
				</entry> 
			 </row> 
			 <row > 
				<entry colname="col1"><codeph>ERROR</codeph></entry> 
				<entry colname="col2"> 
				  <p>An error occurred during the process. An error also might
					 affect what your application can do next. 
				  </p> 
				</entry> 
			 </row> 
		  </tbody> 
		</tgroup> 
	 </table> 
	 </p> 
	 <note type="tip">You can use the state to provide feedback on the process (for example, a spinner
			while waiting for the next state change) or to take the next step in playing the media,
			such as waiting for the appropriate state before calling the next method. </note> 
	 <p >For example:
		<codeblock  outputclass="syntax java">@Override
public void onStateChanged(MediaPlayer.PlayerState state, 
                           MediaPlayerNotification notification) {
   switch (state) {
      // It is recommended that you call prepareToPlay() after receiving 
      // the INITIALIZED state.
      case INITIALIZED:
         _mediaPlayer.prepareToPlay();
         break;
      case PREPARING:
         showBufferingSpinner();
         break;
      case PREPARED:
         hideBufferingSpinner();
      .....
    }
}</codeblock>
	 </p> 
  </conbody> 
</concept> 
