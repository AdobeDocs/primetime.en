<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_construct-ctrl-bar-for-dvr"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Construct a control bar enhanced for DVR</title> 
  <shortdesc>You can implement a control bar with DVR support for VOD 
	 <ph >and live 
	 </ph>streaming. DVR support includes the concept of a seekable window and
	 the client live point. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_FB667613B051450983313FE06E7E84E4">
		<ul id="ul_CF5F00F47F594984AC85460E607EF8B7" > 
		  <li id="li_609F88BEABB44BE09981D90B99DBE38F">For VOD, the length of the
			 seekable window is the duration of the entire asset. 
		  </li> 
		  <li id="li_AA1DB8BA37004F119C9D9175AECAAF8F">For live streaming, the length of the DVR
					(seekable) window is defined as the time range starting at the live playback
					window and ending at the client live point. <p>The client live point is
						calculated by subtracting the buffered length from the live window end. The
						target duration is a value bigger than or equal to the maximum duration of a
						fragment in the manifest. </p>
					<p>The default value is 10000 ms. </p>
					<p>The control bar for live playback supports DVR by first positioning the thumb
						at the client live point when starting playback and by displaying a region
						that marks the area where seek is not allowed.</p>
				</li> 
		</ul> 
		<fig frame="all" id="fig_37A39A28BA714BA5A2C461357ED5BD41">
				<image href="images/dvr-window.PNG" height="97" width="684" align="left"
					id="image_mjx_5vn_1p"/>
			</fig> 
	 </context> 
	 <steps id="steps_DE587E60CD204CC89AF73D31014D14D8">
		<step id="step_DC98D0E0B6B54CF9A6BFA8DAED5F936E" >
		  <cmd>To implement a control bar with DVR support, follow the steps for
			 displaying a seek scrub bar, with a few minor differences:
		  </cmd>
		  <info > 
			 <ul id="ul_F9672B9461504F9A8C10D8A85E0660AF"> 
				<li id="li_94C7951D217E4D829A4ECAB12D680E60">You can choose to
				  implement a control bar that is mapped only for the seekable range instead of
				  for the playback range. Any user interaction for seek can be considered safe in
				  the seekable range. 
				</li> 
				<li id="li_1386EBF9E2C04C00BF602C973E3FAB85">You can choose to
				  implement a control bar that is mapped for the playback range but that also
				  displays the seekable range. 
				</li> 
			 </ul>
			 <p>For a control bar: 
			 <ol id="ol_DF0A45255E8E4D4BA6E0EF415C266E0A"> 
				<li id="li_A08EACC9B3704E2980603E5A0BBF9057">Add an overlay to the
				  control bar that represents the playback range. 
				</li> 
				<li id="li_95B0D7AEE79144C79E00A7E1B3834BE0">When the user starts
				  to seek, check whether the desired seek position is within the seekable range
				  using 
				  <codeph>MediaPlayer.getSeekableRange</codeph>.
				</li>
			 </ol>
			 </p>
			 <p >For example:
				<codeblock  outputclass="syntax java">TimeRange seekableRange = _mediaPlayer.getSeekableRange();
if (seekableRange.contains(desiredSeekPosition)) {
    _mediaPlayer.seek(desiredPosition);
}</codeblock>
			 </p>
			 <p >You can also choose to seek to the client live
				point using the 
				<codeph>MediaPlayer.LIVE_POINT</codeph> constant.
				<codeblock >mediaPlayer.seek(MediaPlayer.LIVE_POINT);</codeblock>
			 </p>
		  </info>
		</step> 
	 </steps> 
  </taskbody> 
</task> 
