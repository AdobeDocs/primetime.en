<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_allow-user-to-change-track"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Example: Allow users to change the caption track</title> 
  <shortdesc>This is an example of how to create a button that allows a user to select a
        closed-caption track.  </shortdesc> 
  <taskbody> 
	 <steps importance="optional" id="steps_FDFB41121A544693888B61F084BADA63"> 
		<step id="step_7AE8DC387D864EDD986565858F883314" > 
		  <cmd>Define a drop-down list. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax actionscript">&lt;s:DropDownList id="ccTracksList" width="85"
                dataProvider="{_ccTracks}"
                change="onCCTrackChange(event)"
                prompt="CC"/&gt;</codeblock> 
		  </info> 
		</step> 
		<step id="step_B5AD9C938E954804A52E0BE6C646256A" > 
		  <cmd>Define a bindable array of closed caption tracks. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax actionscript">[Bindable] private var _ccTracks:ArrayCollection = 
  new ArrayCollection(); // active tracks
</codeblock> 
		  </info> 
		</step> 
		<step id="step_1C6EB90BFFC54B659BAC07B5956C6908" > 
		  <cmd>Set up listeners. 
		  </cmd> 
		  <info> 
			 <p> 
				<codeblock outputclass="syntax actionscript">player.addEventListener(MediaPlayerItemEvent.ITEM_CREATED, onItemCreated);
player.addEventListener(MediaPlayerItemEvent.CAPTIONS_UPDATED, onCaptionUpdated);</codeblock> 
			 </p> 
			 <p>To remove the listeners from your destruction code: 
				<codeblock outputclass="syntax actionscript">player.removeEventListener(MediaPlayerItemEvent.ITEM_CREATED, onItemCreated);
player.removeEventListener(MediaPlayerItemEvent.CAPTIONS_UPDATED, onCaptionUpdated);</codeblock> 
			 </p> 
		  </info> 
		</step> 
		<step id="step_4A30EEA4FE7C4095AD62B6E667B43D5E" > 
		  <cmd>Create and update the list when a user makes a choice from the
			 list. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax actionscript">private function onCCTrackChange(event:IndexChangeEvent):void {
    var ccTrackIndex:int = event.newIndex;
    var ccTracks:Vector.&lt;ClosedCaptionsTrack> = 
      _player.currentItem.closedCaptionsTracks;
    if (ccTrackIndex == 0) {
        _player.ccVisibility = MediaPlayer.INVISIBLE;
    }
    else if (ccTrackIndex &lt;= _ccTracks.length) {
        var index:Number = findFromActiveIndex(ccTracks, ccTrackIndex - 1);
        _player.currentItem.selectClosedCaptionsTrack(ccTracks[index]);
        _player.ccVisibility = MediaPlayer.VISIBLE;
    }
}

private function findFromActiveIndex(ccTracks:Vector.&lt;ClosedCaptionsTrack>, 
  ccTrackIndex:int):Number {
    var count:Number = 0;
    for each (var ccTrack:ClosedCaptionsTrack in ccTracks) {
        if (count &lt; ccTrackIndex)
            count = count + 1;
        else
            return count;
    }
    return -1;
}

private function onItemCreated(event:MediaPlayerItemEvent):void {
    ... (you are likely to need more code here for other reasons)
    updateCCTracks(_player.currentItem.closedCaptionsTracks);
}

private function onCaptionUpdated(event:MediaPlayerItemEvent):void {
    ... (you are likely to need more code here for other reasons)
    updateCCTracks(_player.currentItem.closedCaptionsTracks, 
                  (_player.ccVisibility == MediaPlayer.VISIBLE) ? 
                   _player.currentItem.selectedClosedCaptionsTrack : null);
}

private function updateCCTracks(tracks:Vector.&lt;ClosedCaptionsTrack>, 
  selectedTrack:ClosedCaptionsTrack = null):void {
    _ccTracks.removeAll();

    _ccTracks.addItem(
        {
            "label": "CC off",
            "data": "cc-off"
        }
    );

    var selectedIndex:int = 0;
    for each (var ccTrack:ClosedCaptionsTrack in tracks) {
        _ccTracks.addItem(
            {
                "label": ccTrack.name,
                "data": ccTrack.name
            }
        );
        if (selectedTrack &amp;&amp; ccTrack.name == selectedTrack.name &amp;&amp;
        ccTrack.language == selectedTrack.language &amp;&amp;
        ccTrack.serviceType == selectedTrack.serviceType) {
            selectedIndex = _ccTracks.length - 1;
        }
    }

    var hasCC:Boolean = _ccTracks.length > 0;
    ccTracksList.enabled = hasCC;
    ccTracksList.mouseEnabled = hasCC;
    ccTracksList.selectedIndex = selectedIndex;
}
</codeblock> 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
