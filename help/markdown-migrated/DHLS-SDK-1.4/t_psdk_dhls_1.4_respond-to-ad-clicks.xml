<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id = "t_psdk_android_respond-to-clicks"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Respond to clicks on ads</title>
<shortdesc>When a user clicks an ad or a related button, your application is responsible for
      responding. <ph conkeyref="phrases/primetime-sdk-name"/> provides you with information about
      the destination URL. </shortdesc>
<taskbody><context><p>This
example shows one possible way to manage ad clicks. </p></context>
<steps>
<step>
            <cmd>Each time an ad is played, display a button on top of the media player. A user who
               clicks the ad is redirected to the ad URL. This button is part of the
                  <filepath>ClickableAdsOverlay.xml</filepath>. </cmd>
            <info>
               <codeblock outputclass="syntax xml">
&lt;?xml version="1.0"?>
&lt;s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" percentWidth="100" horizontalAlign="center">    
        &lt;fx:Declarations>&lt;fx:String id="text"/>&lt;/fx:Declarations>
        &lt;s:Label text="{text}"  backgroundAlpha="0.75" backgroundColor="#DEDEDE" 
            color="#000000" paddingBottom="5" paddingRight="5" paddingLeft="5" 
            paddingTop="5"/>
&lt;/s:VGroup></codeblock>
            </info>
         </step>

<step>
            <cmd>Include this overlay on our media player sample, <filepath>psdkdemo.xml</filepath>. </cmd>
            <info>
               <p outputclass="syntax xml">
                  <codeblock outputclass="syntax xml">
&lt;psdk:ClickableAdsOverlay id="clickableAdsOverlay" 
    visible="false"   top="10" right="0" left="0" 
    text="Click here for more information"  
    click="onAdsOverlayClicked()"
&lt;/psdk:ClickableAdsOverlay</codeblock>
               </p>
            </info>
         </step>
<step>
            <cmd> To make the view visible only when an ad is playing, listen for the
                  <codeph>onAdStart</codeph> and <codeph>onAdComplete</codeph> events dispatched by
                  <ph conkeyref="phrases/primetime-sdk-name"/>.</cmd>
            <info>
               <p>
                  <codeblock outputclass="syntax actionscript">_player.addEventListener(AdPlaybackEvent.AD_STARTED, onAdStarted);
_player.addEventListener(AdPlaybackEvent.AD_COMPLETED, onAdCompleted);
</codeblock>
               </p>
               <p>
                  <codeblock outputclass="syntax actionscript">
private function onAdStarted(event:AdPlaybackEvent):void {
    var primaryAsset:AdAsset = event.ad.primaryAsset;
    if (primaryAsset.adClick != null) {
        clickableAdsOverlay.visible = true; 
    }
}
private function onAdCompleted(event:AdPlaybackEvent):void {
    clickableAdsOverlay.visible = false;
}</codeblock>
               </p>
            </info>
         </step>

<step><cmd>Monitor
user interactions on clickable ads. When the user touches or clicks
the ad or button, notify <ph conkeyref="phrases/primetime-sdk-name"/> with <codeph>notifyClick</codeph>.</cmd>
<info><p>
<codeblock outputclass="syntax actionscript">private function onAdsOverlayClicked():void {    
    _mediaPlayer.view.notifyClick();
}</codeblock></p></info></step>

<step>
            <cmd>Listen for the <codeph>AdclickEvent.AD_CLICK</codeph> event. </cmd>
            <info>
               <p>If an ad is playing, <ph conkeyref="phrases/primetime-sdk-name"/> dispatches the
                     <codeph>AdClickEvent.AD_CLICK</codeph> event, from which you can retrieve the
                  click-through URL and related information. </p>
            </info>
            <info>
               <p>
                  <codeblock outputclass="syntax actionscript">
_player.addEventListener(AdClickEvent.AD_CLICK, onAdClick);</codeblock>
               </p>
            </info>
         </step>

<step><cmd>Pause the
media player while directing the user to the ad URL. </cmd>
<info><p>
<codeblock outputclass="syntax actionscript">private function onAdClick(event:AdClickEvent):void {
    _logger.info("#onAdClick Ad clicked. Target url is {0}", event.adClick.url); 
    _player.pause();
    var adRequest:URLRequest = new URLRequest(event.adClick.url);
    navigateToURL(adRequest, event.adClick.title);
}</codeblock></p></info></step>

<step><cmd>Display
the ad click-through URL and any related information. </cmd>
<info>For example, you could display it in one of the following
ways: <ul>
<li>Open the click-through
URL in a browser within your application. <p>On desktop platforms,
the video ad playback area is typically used for invoking click-through
URLs upon user clicks.</p></li>
<li>Redirect the user
to the external mobile web browser. <p>On mobile devices, the
video ad playback area is used for other functions, such as hiding
and showing controls, pausing playback, expanding to full screen,
and so on. Therefore, on mobile devices, a separate view, such as
a sponsor button, is usually presented to the user as a means to
launch the click-through URL. </p></li></ul></info></step>

<step><cmd>Close the
browser window in which the click-through information is displayed
and resume playing the video. </cmd></step></steps>
</taskbody></task>
