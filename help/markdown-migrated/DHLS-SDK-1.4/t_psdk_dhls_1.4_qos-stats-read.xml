<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_qosprovider_tracking"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Read QOS playback, buffering, and device statistics</title> 
  <shortdesc> You can read playback, buffering, and device statistics from the
			<codeph>QOSProvider</codeph> class. </shortdesc> 
  <taskbody> 
	 <context id="context_49F8FBE2E7DF422399761BF4F389EFE7">
		<p >The 
		  <codeph>QOSProvider</codeph> class provides various statistics,
		  including information about buffering, bit rates, frame rates, time data, and
		  so on. 
		</p>
		<p>It also provides information about the device, such as the manufacturer, model, operating
				system, SDK version, and screen size/density.</p> 
	 </context> 
	 <steps id="steps_77E17064AC3F4D58AFCB874ACF2B984A"> 
		<step id="step_0AB792858C30431DB60E80F689C29257">
				<cmd>Instantiate a media player.</cmd>
			</step>
		<step id="step_D469B207DFD04A619672486A7DAB9848" >
		  <cmd>Create a 
			 <codeph >QOSProvider</codeph> object
			 and attach it to the media player. 
		  </cmd>
		  <info>
			 <codeblock  outputclass="syntax actionscript">// Create Media Player.
_mediaQosProvider = new QOSProvider;
_mediaQosProvider.attachMediaPlayer(_mediaPlayer);</codeblock>
		  </info>
		</step> 
		<step id="step_0D9521ADFB0F48638C935CB43F70CD88"> 
		  <cmd importance="optional">(Optional) Read the playback statistics. 
		  </cmd> 
		  <info>
			 <p>One solution to read playback statistics is to have a timer, that periodically fetches the
						new QoS values from the <codeph>QOSProvider</codeph>. For example:
						<codeblock outputclass="syntax actionscript">var qosTimer:Timer = new Timer(1000); // every 1 second 
qosTimer.addEventListener(TimerEvent.Timer, onQoSTimer); 
qosTimer.start();
private function onQoSTimer(event:TimerEvent):void {
    var playbackInformation:PlaybackInformation = _mediaQosProvider.getPlaybackInformation();
    qosInfo["Frame rate"] = playbackInformation.frameRate.toFixed(); 
    qosInfo["Dropped frames"] = playbackInformation.droppedFrameCount.toFixed();
    qosInfo["Bitrate"] = playbackInformation.bitrate.toFixed();
    qosInfo["Bandwidth"] = playbackInformation.perceivedBandwidth;
    qosInfo["Buffering time"] = playbackInformation.bufferingTime.toFixed();
    qosInfo["Buffer length"] = playbackInformation.bufferLength.toFixed(); 
    qosInfo["Buffer time"] = playbackInformation.bufferTime.toFixed();
    qosInfo["Empty buffer count"] = playbackInformation.emptyBufferCount.toFixed(); 
    qosInfo["Time to load"] = playbackInformation.timeToLoad.toFixed(); 
    qosInfo["Time to start"] = playbackInformation.timeToStart.toFixed();
    qosView.update(qosInfo);
}</codeblock>
					</p> 
		  </info> 
		</step> 
		<step id="step_CADB225E027246DB91F97C70EF7C93A3" importance="optional"> 
		  <cmd>(Optional) Read the device-specific information. 
		  </cmd> 
		  <info> 
			 <codeblock  outputclass="syntax actionscript">// Show device information
var deviceInfo:DeviceInformation = new QOSProvider.deviceInformation;
qosInfo["deviceModel"] = deviceInfo.manufacturer +"-" + deviceInfo.model;
qosInfo["os"] = deviceInfo.os; 
qosInfo["runtime"] = deviceInfo.runtimeVersion; 
qosInfo["widthPixels"] = deviceInfo.widthPixels; 
qosInfo["heightPixels"] = deviceInfo.heightPixels;
qosView.update(qosInfo); </codeblock> 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
