<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_android_construct-ctrl-bar-for-dvr"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Construct a control bar enhanced for DVR</title> 
  <shortdesc>You can implement a control bar with DVR support for VOD 
	 <ph >and live 
	 </ph>streaming. DVR support includes the concept of a seekable window and
	 the client live point. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_FB667613B051450983313FE06E7E84E4">
		<ul id="ul_B4415938A99A45FA87888C5E09C4D972" > 
		  <li id="li_C79CB182164B44168C1004584413EB1B">For VOD, the length of the
			 seekable window is the duration of the entire asset. 
		  </li> 
		  <li id="li_B210EDD6CA8746DDA73F4CCF622F4D1E">For live streaming, the
			 length of the DVR (seekable) window is defined as the time range starting at
			 the live playback window and ending at the client live point. 
			 <p>The client live point is calculated by subtracting the buffered
				length from the live window end. The target duration is a value bigger than or
				equal to the maximum duration of a fragment in the manifest. 
			 </p> 
			 <p >The default value is 10000 ms. 
			 </p> 
			 <p>The control bar for live playback supports DVR by first
				positioning the thumb at the client live point when starting playback and by
				displaying a region that marks the area where seek is not allowed. 
			 </p> 
		  </li> 
		</ul> 
		<fig frame="all" id="fig_37A39A28BA714BA5A2C461357ED5BD41">
				<image href="images/dvr-window.PNG" height="97" width="684" align="left"
					id="image_mjx_5vn_1p"/>
			</fig> 
	 </context> 
	 <steps id="steps_DE587E60CD204CC89AF73D31014D14D8"> 
		<step id="step_D3B7811213F145C4AB7F7B06DA371806" >
		  <cmd>To implement a control bar with DVR support, follow the steps for
			 displaying a seek scrub bar, with a few minor differences:
		  </cmd>
		  <info > 
			 <ul id="ul_E09DC6C0965F4CF985A73F90EE54D0B5"> 
				<li id="li_12C9D75F60B84AFD99A3DAA6708DC147">You can choose to
				  implement a control bar that is mapped only for the seekable range instead of
				  for the playback range. Any user interaction for seek can be considered safe in
				  the seekable range. 
				</li> 
				<li id="li_6C8D926F77A6449FA1CE2D9F3EBBCAD9">You can choose to
				  implement a control bar that is mapped for the playback range but that also
				  displays the seekable range. 
				</li> 
			 </ul> 
		  </info>
		  <info>For a control bar: 
			 <ol id="ol_F630AB7A8AF74550959E9735E16CB93F"> 
				<li id="li_7B0FFF564B304721BCE278C736A93550">Add an overlay to the
				  control bar that represents the playback range. 
				</li>
				<li id="li_D9BA4327C0044FC59938AC2406755D39" >When
				  the user starts to seek, check whether the desired seek position is within the
				  seekable range using the 
				  <codeph>MediaPlayer.seekableRange</codeph> property.
				</li>
			 </ol> 
			 <p>For example:
						<codeblock outputclass="syntax actionscript">var desiredPosition:Number = // TODO : choose a value

private function onStatusChange(event:MediaPlayerStatusChangeEvent):void {
    switch(event.status) {
        case MediaPlayerStatus.PREPARED:
            _mediaPlayer.prepareToPlay(desiredPosition);
    }
}</codeblock>
					</p>
			 <p>You can also choose to seek to the client live point using the
							<codeph>MediaPlayer.LIVE_POINT</codeph> constant.
						<codeblock outputclass="syntax actionscript">private function onSeekToLiveClick(event:MouseEvent):void {
    _player.seek(DefaultMediaPlayer.LIVE_POINT);
}</codeblock>
					</p>
		  </info>
		</step> 
	 </steps> 
  </taskbody> 
</task> 
