<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_content_resolver_implement_android"> 
  <title>Implement a custom content resolver</title> 
  <shortdesc>You can implement your own content resolvers based on the default
	 resolvers. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_D053D901791940C1A7651C73EA24490B"> 
		<p> When <ph conkeyref="phrases/primetime-sdk-name"/> detects a new opportunity, it iterates
                through the registered content resolvers looking for one that is capable of
                resolving that opportunity <ph> using the <codeph>canResolve</codeph> method</ph>.
                The first one that returns true is selected for resolving the opportunity. If no
                content resolver is capable, then that opportunity is skipped. Because the content
                resolving process is usually asynchronous, the content resolver is responsible for
                notifying <ph conkeyref="phrases/primetime-sdk-name"/> when the process has
                completed.  <ul id="ul_74FBE4302A594CD3B7658E5881D57A26">
                    <li id="li_572D3816199E49F08F562723FE8095A6">The content resolver calls
                            <codeph>client.place</codeph> to specify what timeline operation <ph
                            conkeyref="phrases/primetime-sdk-name"/> needs to execute (usually an ad
                        break placement). </li>
                    <li id="li_A9F3B1E6BC324CBFB954364C5B85FDBE">The content resolver calls
                            <codeph>client.notifyCompleted</codeph> if the resolving process is
                        succcessful, or <codeph>client.notifyFailed</codeph> if the process fails.
                    </li>
                </ul>
            </p> 
		<p> 
		</p> 
	 </context> 
	 <steps id="steps_98078B66B4D64880815B022D18414CAF"> 
		<step  id="step_B1E2D80EE0EE4097B04CBE5EE90977B5"> 
		  <cmd>Create a custom opportunity resolver. 
		  </cmd> 
		  <stepxmp> 
			 <codeblock>public class CustomResolver extends ContentResolver {
 
    /**
     * Default constructor.
     */
    public function CustomResolver() {
    }
 
    override protected function doConfigure(item:MediaPlayerItem):void {
        // here you can read any media stream characteristics which
        // might help configure your content resolver like
        // - the media player item configuration through the item.config
        // - the media resource metadata through item.resource.metadata
    }
 
    /**
     * @inheritDoc
     */
    override protected function doCanResolve(opportunity:Opportunity):Boolean {
        // check if the opportunity can be resolved by this resolver
        // if yes return true, otherwise return false
         
        return true;
    }
 
    /**
     * @inheritDoc
     */
    override protected function doResolve(opportunity:Opportunity):void {
        // start the resolving process
        // communicate with your custom ad server
 
        // in this example we assume that:
        // - if successful, onResolveCompleted method will be invoked
        // - if failed, onResolveFailed method will be invoked
    }
 
    private function onResolveCompleted(response:*):void {
        try {
            var proposals:Vector.&lt;TimelineOperation&gt; = new Vector.&lt;TimelineOperation&gt;();
             
            // extract the timeline ad placement from the response
            // and add them to the proposal vector
            // - extract the ad break
            // - calculate the placement ( can reuse the opportunity.placement )
            // var timelineOperation:AdBreakPlacement = new AdBreakPlacement(placement, adBreak);
            // proposals.push(timelineOperation);
             
            client.process(proposals);
            client.notifyCompleted(_opportunity);
        } catch (error:Error) {
            onResolveFailed(error);
        }
    }
 
    private function onResolveFailed(error:Error):void {
 
        var errorMetadata:Metadata = new Metadata();
        MetadataUtils.serializeError(error, errorMetadata);
 
        var mediaError:MediaError = new MediaError(NotificationCode.CONTENT_RESOLVING_ERROR, errorMetadata);
        client.notifyFailed(_opportunity, mediaError);
    }
     
    ...
}</codeblock> 
		  </stepxmp> 
		</step> 
		<step id="step_0A66BA12F84C4141BF80D7FAEAE8EA3B">
                <cmd>Create the custom content factory, which uses the custom content
                    resolver.</cmd>
                <info>For example: </info>
                <stepxmp>
                    <codeblock outputclass="syntax actionscript">public class CustomContentFactory extends DefaultContentFactory {
        ...
 
        /**
         * @inheritDoc
         */
        override protected function 
          doRetrieveResolvers(item:MediaPlayerItem):Vector.&lt;ContentResolver&gt; {
            var result:Vector.&lt;ContentResolver&gt; = new Vector.&lt;ContentResolver&gt;();
 
            var resource:MediaResource = item.resource;
 
            if (resource.metadata != null) {
                if (resource.metadata.containsKey(DefaultMetadataKeys.AUDITUDE_METADATA_KEY)) {
                    result.push(new AuditudeAdResolver());
                } else if (resource.metadata.containsKey("custom-opportunity-detector")) {
                    result.push(new CustomResolver());
                }
            }
            return result;
        }
}</codeblock>
                </stepxmp>
            </step> 
		<step id="step_4CBA7693CC144B48AAF4AE0FFB1BB9E2">
                <cmd>Register the custom content factory for the media stream to be played. </cmd>
                <info>For example: </info>
                <stepxmp>
                    <codeblock>var mediaPlayerItemConfig:MediaPlayerItemConfig = new DefaultMediaPlayerItemConfig();
mediaPlayerItemConfig.advertisingFactory = new CustomContentFactory();
...
 
var advertisingMetadata:AdvertisingMetadata = new AdvertisingMetadata();
// set any parameter you need for custom ad resolver
// advertisingMetadata.setValue("customparam", "customvalue");
 
var metadata:Metadata = new Metadata();
metadata.setMetadata("custom-opportunity-detector", advertisingMetadata);
var mediaResource:MediaResource = MediaResource.createFromUrl(url, metadata);
 
 
player.replaceCurrentResource(mediaResource, mediaPlayerItemConfig);</codeblock>
                </stepxmp>
            </step> 
	 </steps> 
  </taskbody> 
</task> 
