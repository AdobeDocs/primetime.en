<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="t_psdk_va_integrate-heartbeats-ios"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Initialize and configure video analytics </title> 
  <shortdesc>You can configure your player to track and analyze video use. 
  </shortdesc> 
  <taskbody> 
	 <prereq id="prereq_255E01DCF8D44761BD477B63CA8CAD62"> 
		<p>Before activating video tracking (video heartbeats), ensure that you
		  have the following: 
		</p> 
		<ul id="ul_2C68EC5C23354744884967A4E4BB9690"> 
		  <li id="li_14C78AB51D6A4102A1C71B76FFFB64BA"><ph conkeyref="phrases/primetime-sdk-name"/> for
					Desktop HLS </li> 
		  <li id="li_810BC5867ABF4314B1A49031E0C6DE6D">Configuration /
			 Initialization Information - Contact your Adobe representative for your
			 specific video-tracking account information: 
			 <table id="table_3565328ABBEE4605A92EAE1ADE5D6F84"> 
				<tgroup cols="2"><colspec colnum="1" colname="col1"
				  colwidth="1.00*"/><colspec colnum="2" colname="col2" colwidth="1.92*"/> 
				  <tbody> 
					 <row> 
						<entry colname="col1">AppMeasurement tracking server endpoint
						  
						</entry> 
						<entry colname="col2">The URL of the Adobe Analytics
						  (formerly SiteCatalyst) back-end collection endpoint. 
						</entry> 
					 </row> 
					 <row> 
						<entry colname="col1">Video analytics tracking server
						  endpoint 
						</entry> 
						<entry colname="col2">The URL of the video analytics back-end collection endpoint. This is
										where all video heartbeat tracking calls are sent. <note
											type="tip">The URL of the visitor tracking server is the
											same as the URL of the analytics tracking server. For
											information about implementing the Visitor ID Service,
											see  <xref
												href="https://marketing.adobe.com/resources/help/en_US/mcvid/mcvid-setup-target.html"
												format="html" scope="external">Implement ID
												Service</xref>. </note>
									</entry> 
					 </row> 
					 <row> 
						<entry colname="col1">Account name 
						</entry> 
						<entry colname="col2">Also known as the Report Suite ID
						  (RSID). 
						</entry> 
					 </row> 
					 <row> 
						<entry colname="col1">Marketing Cloud organization ID 
						</entry> 
						<entry colname="col2">A string value required for
						  instantiating the Visitor component. 
						</entry> 
					 </row> 
					 <row > 
						<entry colname="col1">Visitor tracking server endpoint 
						</entry> 
						<entry colname="col2">The URL of the back-end endpoint that
						  provides a unique identifier for the current video viewer. 
						</entry> 
					 </row> 
					 <row> 
						<entry colname="col1">Publisher 
						</entry> 
						<entry colname="col2">This is the Publisher ID, which is
						  provided to customers by their Adobe representative. 
						  <note type="tip">This ID is not just a string with the
							 brand/television name. 
						  </note> 
						</entry> 
					 </row> 
				  </tbody> 
				</tgroup> 
			 </table> 
		  </li> 
		</ul> 
	 </prereq> 
	 <context id="context_62D2FBBC95CE4A37988D58989AEE9A3F"> 
		<p>To configure video tracking in your player: 
		</p> 
	 </context> 
	 <steps id="steps_9EC0594E8F764CD3A888ECF4B07D653A"> 
		<step 
		 id="step_1D0F9E694E444E66829F10F3A719474A"> 
		  <cmd>Instantiate and configure the VisitorAPI library. 
		  </cmd> 
		  <info> 
			 <p>Keep the following information in mind: 
			 <ul id="ul_E463B079CD4C4FEB8F6DFE9A6980FF66"> 
				<li id="li_D9BB0A443236455CA46FC08CCCC47C42">Instantiation requires
				  a Marketing Cloud organization ID input parameter that is provided by Adobe. 
				  <p> This is a string value. 
				  </p> 
				</li> 
				<li id="li_87F9B36C5D164A378EEE2B0CEDB8C260">The only configuration
				  option for the VisitorAPI library is the URL of the back-end endpoint that
				  provides the unique identifier for the current user. 
				</li> 
				<li id="li_26969FC36E694743BE8A479639BF99F5">The URL of the visitor tracking server is the same
								as the URL of the analytics tracking server. <p>For information
									about implementing the Visitor ID Service, see <xref
										href="https://marketing.adobe.com/resources/help/en_US/mcvid/mcvid_implement.html"
										format="html" scope="external">Visitor ID Service
										Implementation</xref>. </p>
							</li> 
			 </ul> 
			 </p> 
		  </info> 
		  <stepxmp> 
			 <codeblock outputclass="syntax actionscript" >var_visitor = new Visitor("MARKETING_CLOUD_ORG_ID");
_visitor.trackingServer = "URL_OF_THE_VISITOR_TRACKER_SERVER‚Äù;
 </codeblock> 
		  </stepxmp> 
		</step> 
		<step  id="step_83C86EE1069C4B8DBFBFB04086339B8E"> 
		  <cmd> Instantiate and configure the AppMeasurement component. 
		  </cmd> 
		  <info> The AppMeasurement instance has many configuration options. For
			 more information, see the 
			 <xref
			 href="http://microsite.omniture.com/t2/help/en_US/reference/#Developer"
			 scope="external" format="html">Adobe Analytics Developer</xref> documentation.
			 The options in the following sample code (<codeph>account</codeph>, 
			 <codeph>visitorNamespace</codeph>, and 
			 <codeph>trackingServer</codeph>) are required, and the values are
			 provided by Adobe. 
			 <note type="important">You must ensure that the dependency chain is
				correctly set up. The AppMeasurement instance aggregates (depends on) the
				Visitor API component. 
			 </note> 
			 <p> 
				<codeblock outputclass="syntax actionscript">// Instantiate and configure AppMeasurement

// Instantiate AppMeasurement instance only once!
if (_appMeasurementObject == null) { 
    _appMeasurementObject = new AppMeasurement();
}

with (_appMeasurementObject) {
    account = "ACCOUNT_NAME"; // Also known as RSID
    trackingServer = "URL_OF_THE_ADOBE_ANALYTICS_TRACKING_SERVER";

    // Use the same value here as for the Visitor API component
    visitorNamespace = "MARKETING_CLOUD_ORG_ID";

    // Attach the Visitor API to the AppMeasurement instance.
    visitor = _visitor; 
    pageName = "pageName";
    charSet = "UTF-8";
    currencyCode = "USD";
}
</codeblock> 
			 </p> 
			 <note type="important"> In your application, ensure that 
				<codeph>appMeasurementObject.visitor</codeph> is populated before
				initiating the video analytics flow, or you might not get any tracking results.
				These results are indicated by the 
				<msgph>Unable to track</msgph> messages in your log. You can add an
				empty track call (<codeph>appMeasurementObject.track</codeph>), poll the 
				<codeph>visitor</codeph> property until it is populated, and
				initiate video analytics. 
			 </note> 
		  </info> 
		</step> 
		<step id="step_F76D58BAF27F4BD5844CF6366F32728C"> 
		  <cmd>Initialize and configure video heartbeat tracking metadata. 
		  </cmd> 
		  <info> 
			 <note type="important">You can stop the video analytics module
				midstream and reinitialize it again as necessary. Before the module is
				reinitialized, ensure that the video analytics metadata is also updated to the
				correct content metadata. To recreate the metadata, repeat sub-steps 1 and 2. 
			 </note> 
		  </info> 
		  <substeps id="substeps_8A0CCB1BAAD845178C1A402907FD9B65"> 
			 <substep id="substep_36D0A17AC1434071BFFDBB2465CF4DB2"> 
				<cmd>Create an instance of the Video Analytics metadata. 
				</cmd> 
				<info>This instance contains all of the configuration information that is needed to enable video
							heartbeat tracking. For example:
							<codeblock outputclass="syntax actionscript">private function getVideoAnalyticsTrackingMetadata():VideoAnalyticsMetadata {    
    // Initialize visitor id service and appMeasurement     
    [...] // as shown in the previous steps    

    var vaMetadata:VideoAnalyticsMetadata = new VideoAnalyticsMetadata();

    with (vaMetadata) {
        trackingServer = "hbTrackingServer";
        publisher = "hbPublisher";
        channel = "hbChannel"; 
        playerName = "hbPlayerName";

        // this overwrites the ContextData variable a.media.friendlyName
        videoName = "hbFriendlyName"; 

        // this will overwrite the ContextData variable a.media.name
        videoId = "hbName";

        enableChapterTracking = true;

        // Set these to false for production deployment
        debugLogging = true; 
        quietMode = false;

    }
}
</codeblock>
						</info> 
			 </substep> 
			 <substep id="substep_C30CDF86898D458C81D8D3A79106BBD3"
			 > 
				<cmd>Add the Video Analytics metadata to the global metadata
				  instance. 
				</cmd> 
				<info> When you are ready, set the global metadata instance on the
				  media resource or the media player item: 
				</info> 
				<stepxmp> 
				  <codeblock  outputclass="syntax actionscript">var resourceMetadata:Metadata = _player.currentItem.resource.metadata;
resourceMetadata.setMetadata(DefaultMetadataKeys.VIDEO_ANALYTICS_METADATA_KEY, 
                             getVideoAnalyticsTrackingMetadata());</codeblock> 
				</stepxmp> 
			 </substep> 
			 <substep 
			 id="substep_6D1A4CDF4B1740C9A810DEECD56F4B87"> 
				<cmd>Initialize the Video Analytics tracker. 
				</cmd> 
				<info>After creating a media player instance, you must create a Video Analytics tracker instance
							and provide a reference to the media player instance. <note type="tip"
								>Always create a new tracker instance for each content playback
								session and remove the previous reference after you detach the media
								player instance.
							</note><codeblock outputclass="syntax actionscript">_videoAnalyticsProvider = new VideoAnalyticsProvider(_appMeasurementObject);
_videoAnalyticsProvider.attachMediaPlayer(_player);</codeblock>
						</info> 
			 </substep> 
			 <substep id="substep_E79EB63CB1D94BD39F7BDCF72F452EED"> 
				<cmd>Destroy the Video Analytics tracker. 
				</cmd> 
				<info>Before you begin a new content playback session, destroy the
				  previous instance of the video tracker. After you receive the content complete
				  event (or notification), wait a few minutes before you destroy the video
				  tracker instance. Destroying the instance immediately might interfere with the
				  Video Analytics tracker's ability to send a video complete ping. 
				</info> 
				<stepxmp> 
				  <codeblock  outputclass="syntax actionscript">if (videoAnalyticsTracker) {
    videoAnalyticsTracker.detachMediaPlayer();
    videoAnalyticsTracker = null;
}</codeblock> 
				</stepxmp> 
			 </substep> 
			 <substep id="substep_C327C9E2BD7946ACB41A2B87AD9CE2E5"> 
				<cmd>Manually mark the Live/Linear stream as complete. 
				</cmd> 
				<info>If you have various episodes on one live stream, you can
				  manually mark an episode as complete by using the complete API. This ends the
				  video tracking session for the current video episode, and you can start a new
				  tracking session for the next episode. 
				  <note type="tip">This API is optional and is not needed for VOD
					 video tracking. 
				  </note> 
				</info> 
				<stepxmp/> 
			 </substep> 
		  </substeps> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
