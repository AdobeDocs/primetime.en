<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "technicalContent/dtd/task.dtd">
<task id="timerange-markers-on-timeline"
 xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"> 
  <title>Place TimeRange ad markers on the timeline</title> 
  <shortdesc>This example shows the recommended way to include <codeph>TimeRange</codeph>
		specifications on the playback timeline. </shortdesc> 
  <taskbody> 
	 <steps> 
		<step> 
		  <cmd>Translate the out-of-band ad-positioning information into a list
			 of 
			 <codeph>TimeRange</codeph> specifications (that is, instances of the 
			 <codeph>TimeRange</codeph> class). 
		  </cmd> 
		</step> 
		<step> 
		  <cmd>Use the set of 
			 <codeph>TimeRange</codeph> specifications to populate an instance of
			 the 
			 <codeph>TimeRangeCollection</codeph> class. 
		  </cmd> 
		</step> 
		<step>
				<cmd>Pass the Metadata instance, which can be obtained from the
						<codeph>TimeRangeCollection</codeph> instance, to the
						<codeph>replaceCurrentItem</codeph> method (part of the
						<codeph>MediaPlayer</codeph> interface). </cmd>
			</step> 
		<step> 
			<cmd>Wait for <ph conkeyref="phrases/primetime-sdk-name"/>
			 to transition to the PREPARED state by waiting for the 
			 <codeph>PlaybackEventListener#onPrepared</codeph> callback to be
			 triggered. 
		  </cmd> 
		</step> 
		<step>
				<cmd>Start video playback by calling the <codeph>play()</codeph> method (part of the
						<codeph>MediaPlayer</codeph> interface). </cmd>
			</step> 
	 </steps> 
	 <result> 
		<ul> 
		  <li> 
			 <p>Handling timeline conflicts: There might be cases when some 
				<codeph>TimeRange</codeph> specifications overlap on the playback
				timeline. For example, the value of the start position corresponding to a 
				<codeph>TimeRange</codeph> specification might be lower than the
			 	value of the end position that was already placed. In this case, 
			 	<ph conkeyref="phrases/primetime-sdk-name"/>
				silently adjusts the start position of the offending 
				<codeph>TimeRange</codeph> specification to avoid timeline
				conflicts. Through this adjustment, the new 
				<codeph>TimeRange</codeph> becomes shorter than originally
				specified. If the adjustment is so extreme that it would lead to a 
			 	<codeph>TimeRange</codeph> with a duration of zero ms, 
			 	<ph conkeyref="phrases/primetime-sdk-name"/>
				silently drops the offending <codeph>TimeRange</codeph> specification. 
			 </p> 
		  </li> 
		  <li> 
			 <p>When 
				<codeph>TimeRange</codeph> specifications for custom ad breaks are
			 	provided, <ph conkeyref="phrases/primetime-sdk-name"/>
			 	attempts to translate these into ads that are grouped inside ad breaks. 
			 	<ph conkeyref="phrases/primetime-sdk-name"/> looks for adjacent 
				<codeph>TimeRange</codeph> specifications and clusters them into
				separate ad breaks. If there are time ranges that are not adjacent to any other
				time range, they are translated into ad breaks that contain a single ad. 
			 </p> 
		  </li> 
		  <li> 
			 <p> It is assumed that the media player item that is being loaded
			 	points to a VOD asset. <ph conkeyref="phrases/primetime-sdk-name"/>
				checks this whenever your application tries to load a media resource whose
				metadata contains 
				<codeph>TimeRange</codeph> specifications that can be used only in
				the context of the custom ad-markers feature. If the underlying asset is not of
				type VOD, <ph conkeyref="phrases/primetime-sdk-name"/>
				library throws an exception. 
			 </p> 
		  </li> 
		  <li> 
		  	<p>When dealing with custom ad markers, <ph conkeyref="phrases/primetime-sdk-name"/>
				deactivates other ad-resolving mechanisms (via 
		  		<ph conkeyref="phrases/auditude-name-long"/>
				(previously known as 
		  		<ph conkeyref="phrases/auditude-name-previously-known-as"/>)
				or other ad provisioning system). You can use either one of the various
				ad-resolver modules provided by <ph conkeyref="phrases/primetime-sdk-name"/>
				or the custom ad-markers mechanism. When using the custom ad-markers API, the
				ad content is considered already resolved and placed on the timeline. 
			 </p> 
		  </li> 
		</ul> 
	 </result> 
	 <example> 
		<p>The following code snippet provides a simple example where a set of three
					<codeph>TimeRange</codeph> specifications are placed on the timeline as custom
				ad-markers. </p> 
		<codeblock outputclass="syntax actionscript">// Assume that the 3 timerange specs are obtained through external means: CMS, etc.
// Use these 3 timerange specs to populate the TimeRangeCollection instance
var timeRanges:TimeRangeCollection = new TimeRangeCollection();
timeRanges.addTimeRange(new TimeRange(0,10000));
timeRanges.addTimeRange(new TimeRange(15000,20000));
timeRanges.addTimeRange(new TimeRange(25000,30000));
 
// create and configure a MediaResource instance
MediaResource mediaResource = 
  MediaResource.createFromUrl("www.example.com/video/test_video.m3u8", 
                              timeRanges.toMetadata(null));</codeblock> 
		<p> 
		</p> 
	 </example> 
  </taskbody> 
</task> 
