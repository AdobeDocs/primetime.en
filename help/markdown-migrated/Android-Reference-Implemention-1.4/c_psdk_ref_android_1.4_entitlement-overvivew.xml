<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_psdk_ref-entitlement-overvivew">
 <title>Entitlement Manager Overview</title>
 <shortdesc>The Entitlement Manager is the feature manager that supports the <ph
   conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/> implementation.</shortdesc>
 <conbody>
  <p><b>Feature Overview</b>
  </p>
  <p>The <ph conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/> integration with
   the Android Primetime SDK Reference Implementation adds a new feature manager to the application.
   However, unlike many of the other feature managers, <i>the EntitlementManager is used in several
    places throughout the application</i>. The following provides an overview of the changes and
   additions made to the Reference Implementation to support <ph
    conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/>: </p>
  <ul id="ul_lw4_cfv_yp">
   <li>
    <p><b>EntitlementManager class</b></p>
    <p>The <codeph>EntitlementManager</codeph> class handles all the communication with the <ph
      conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/> SDK, plus encapsulates the
     application logic required for the entitlement workflows. The
      <codeph>EntitlementManager</codeph>'s public API is used by the application to initiate
     entitlement workflows, while the <codeph>EntitlementMangerListener</codeph> interface provides
     a callback mechanism for the application to handle <codeph>EntitlementManger</codeph> events. </p>
   </li>
   <li>
    <p><b>EntitlementManger callbacks</b></p>
    <p>The Reference Implementation's main activity, the <codeph>CatalogActivity</codeph>, creates
     an instance of <codeph>EntitlementManagerListener</codeph> and registers it with the
      <codeph>EntitlementManager</codeph>. In this way, the <codeph>EntitlementManager</codeph> may
     signal needed UI updates to the rest of the application. The callbacks include
     displaying/hiding a loading dialog, displaying status dialogs, updating authorization and
     authentication icons, and starting video playback upon successful authorization. </p>
   </li>
   <li>
    <p><b>Entitlement Dialogs</b></p>
    <p>The <codeph>EntitlementDialogFragment</codeph> class generates dialog messages based on the
     entitlement status passed to the class constructor. This class is used for authentication
     success messages as well as all error messages. The <codeph>CatalogActivity</codeph> displays
     the entitlement dialogs when it receives specific events from the
      <codeph>EntitlementManager</codeph>. In addition, the <codeph>CatalogActivity</codeph>
     implements the <codeph>EntitlementDialogListener</codeph> interface, which includes callback
     methods to signal when a dialog is closed or when the user logs out from the <ph
      conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/> service. </p>
   </li>
   <li>
    <p><b>Content Provider Selection and Login</b></p>
    <p>During authentication with <ph
      conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/>, two new activities,
      <codeph>MvpdPickerActivity</codeph> and <codeph>MvpdLoginActivity</codeph>, allow the user to
     select their content provider and login. Both of these activities are started from the
      <codeph>CatalogActivity</codeph> via the <codeph>EntitlementManager</codeph>. Additionally,
     both the <codeph>MvpdPickerActivity</codeph> and <codeph>MvpdLoginActivity</codeph> return
     results to the <codeph>CatalogActivity</codeph> and therefor the
      <codeph>CatalogActivity</codeph> must override the <codeph>Activity.onActivityResult</codeph>
     method. </p>
   </li>
   <li>
    <p><b>Sign In button</b></p>
    <p>The Reference Implementation's main activity, the <codeph>CatalogActivity</codeph>, includes
     a new "Sign In" button in its action bar. The Sign In button allows the user to initiate
     authentication with <ph conref="../../phrase_library_ref_impl.xml#c_psdk_phrase-library/auth-name"/>.
     Additionally, the user may initiate authentication by selecting a protected video for playback.
     The Sign In button's icon and text changes depending on the user's authentication status, and
     the <codeph>CatalogActivity</codeph> contains code to update the button's icon and text when
     the page refreshes. To do this, when the <codeph>CatalogActivity</codeph> starts, it calls
      <codeph>EntitlementManager.checkAuthentication()</codeph> to update the user's authentication
     status. </p>
   </li>
   <li>
    <p><b>Content entitlement</b></p>
    <p>Within the <codeph>CatalogView</codeph>, new icons are displayed on top of the content's icon
     to signal the user's authorization status for that content. For example, if the user is
     pre-authorized to view a video, then a green circle icon is displayed over the content.
     However, if the user is not pre-authorized to view the video, a key icon is displayed. The
     display of these icons is handled in <codeph>ContentTileAdapter</codeph>, however the update of
     their state is initiated from the <codeph>CatalogActivity</codeph> when a callback in the
      <codeph>EntitlementManagerListener</codeph> is called. </p>
   </li>
   <li>
    <p><b>Content Playback</b></p>
    <p>Video playback now requires an authorization check by the
     <codeph>EntitlementManager</codeph>. The call to
      <codeph>EntitlementManager.getAuthorization()</codeph> occurs within
      <codeph>CatalogView</codeph>. If the video requires authorization and the user is authorized,
     the <codeph>PlayerActivity</codeph> is started from the <codeph>CatalogActivity</codeph>. </p>
   </li>
  </ul>
 </conbody>
</concept>
