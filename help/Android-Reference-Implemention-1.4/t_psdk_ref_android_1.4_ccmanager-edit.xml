<?xml version="1.0"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<!-- Created with XMetaL (http://www.xmetal.com) -->
<task id="t_psdk_ref_ccmanager-edit"> 
  <title>Displaying the closed captions</title> 
  <shortdesc>The CCManager handles the display and visibility of the closed
	 captions, along with procuring the tracks from the <ph conref="../../phrase_library.xml#c_psdk_phrase-library/primetime-sdk-name"/> and assigning those
	 tracks to the selected media item. 
  </shortdesc> 
  <taskbody> 
	 <context id="context_0C2BDCC1551749BC96619107DE26A08D"> 
		<p>Set display and visibility options by editing CCManager.java. 
		</p> 
	 </context> 
	 <steps id="steps_03A33390AD314172840B1CAB0A6AA43E"> 
		<step id="step_D641E7D03DFE48A5B7AF7AA422AB12C5"> 
		  <cmd>Get the array of closed captioning in string format. 
		  </cmd> 
		  <info> 
			 <codeblock outputclass="syntax java">/**
     * Get the array of closed captioning in string format. Each of them
     * concatenates with a given label.
     *
     * @param label
     *            the label to be
     * @return an array of String each represents the closed captioning track
     */
 
    @Override
    public List &lt;String&gt; getCCsAsArray(String label) {
        List&lt;String&gt; closedCaptionsTracksAsStrings = new ArrayList&lt;String&gt;();
        MediaPlayerItem currentItem = mediaPlayer.getCurrentItem();
        if (currentItem != null) {
            List&lt;ClosedCaptionsTrack&gt; closedCaptionsTracks = currentItem
                    .getClosedCaptionsTracks();
            Iterator&lt;ClosedCaptionsTrack&gt; iterator = closedCaptionsTracks
                    .iterator();
            while (iterator.hasNext()) {
                ClosedCaptionsTrack closedCaptionsTrack = iterator.next();
                String isActive = closedCaptionsTrack.isActive() ? " (" + label
                        + ")" : "";
                if(!(closedCaptionsTrack.getLanguage().isEmpty()) || !(isActive.isEmpty()) )
                {
                    closedCaptionsTracksAsStrings.add(closedCaptionsTrack.getName()
                            + " : " + closedCaptionsTrack.getLanguage() + isActive);
                }
            }
        }
 
        return closedCaptionsTracksAsStrings;
                //.toArray(new String[closedCaptionsTracksAsStrings.size()]);
    }

</codeblock> 
		  </info> 
		</step> 
		<step id="step_2BF2D9565F8745B587DDF2354528D977"> 
		  <cmd>Show the closed captioning tracks in a log. 
		  </cmd> 
		  <info> 
			 <codeblock>    /**
     * Show the closed captioning tracks in log
     */
    private void showClosedCaptions() {
        List&lt;ClosedCaptionsTrack&gt; closedCaptionsTracks = mediaPlayer
                .getCurrentItem().getClosedCaptionsTracks();
 
        Iterator&lt;ClosedCaptionsTrack&gt; iterator = closedCaptionsTracks
                .iterator();
        while (iterator.hasNext()) {
            ClosedCaptionsTrack track = iterator.next();
            Player.logger.i(LOG_TAG + "#", "CC track: " + track.getName()
                    + ". Has activity: " + track.isActive() + ".");
        }
    }</codeblock> 
		  </info> 
		</step> 
		<step id="step_3A13D5D029E5479685A8CC38E280BE6C"> 
		  <cmd>Determine if there is closed caption information and filter the
			 inactive closed captions and map the index based on language. 
		  </cmd> 
		  <info> 
			 <codeblock>
     /**
     * Determine closed captioning visibility from config
     *
     * @return Visibility.VISIBLE if CC visibility is set to true in the config,
     *         Visibility.INVISIBLE otherwise
     */
    private MediaPlayer.Visibility getClosedCaptionVisibilityPref() {
        return ccConfig.getCCVisibility() ? MediaPlayer.Visibility.VISIBLE
                : MediaPlayer.Visibility.INVISIBLE;
    }
 
// method to Filter the inactive closed captions and map the index based on the language 
// to get the appropriate track.

    public void selectClosedCaptionsFiltered(String language, int indexFiltered) {
        MediaPlayerItem currentItem = mediaPlayer.getCurrentItem();
        int index = 0;
        if (!language.isEmpty()) {
            if(!language.equalsIgnoreCase("None")) {
                List&lt;ClosedCaptionsTrack&gt; closedCaptionsTracks = currentItem
                .getClosedCaptionsTracks();
         
                for (int i = 0; i&lt;closedCaptionsTracks.size(); i++) {           
                    ClosedCaptionsTrack closedCaptionTrackObj = closedCaptionsTracks.get(i);
                    if (language.contains(closedCaptionTrackObj.getName())) {
                        index = i;
                        setSelectedClosedCaptionsIndex(indexFiltered);
                        break;
                    }
                }
                ClosedCaptionsTrack desiredClosedCaptionsTrack = currentItem
                        .getClosedCaptionsTracks().get(index);
                boolean result = currentItem
                        .selectClosedCaptionsTrack(desiredClosedCaptionsTrack);
                if (result) {
                    updateClosedCaptionsVisibility();
                }  
            }
            else {
                 setSelectedClosedCaptionsIndex(indexFiltered);
                 mediaPlayer.setCCVisibility(MediaPlayer.Visibility.INVISIBLE);
            }
        }
    }</codeblock> 
		  </info> 
		</step> 
	 </steps> 
  </taskbody> 
</task> 
